<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="838" onload="init(evt)" viewBox="0 0 1200 838" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="838" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="821.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="821.00"> </text><svg id="frames" x="10" width="1180" total_samples="9868834405988"><g><title>arrow::bitmap:: (1,400,051,646 samples, 0.01%)</title><rect x="0.0031%" y="773" width="0.0142%" height="15" fill="rgb(227,0,7)" fg:x="306984276" fg:w="1400051646"/><text x="0.2531%" y="783.50"></text></g><g><title>std::path::Path::components (8,043,795,249 samples, 0.08%)</title><rect x="0.0453%" y="453" width="0.0815%" height="15" fill="rgb(217,0,24)" fg:x="4470367876" fg:w="8043795249"/><text x="0.2953%" y="463.50"></text></g><g><title>std::path::has_physical_root (6,681,473,473 samples, 0.07%)</title><rect x="0.0591%" y="437" width="0.0677%" height="15" fill="rgb(221,193,54)" fg:x="5832689652" fg:w="6681473473"/><text x="0.3091%" y="447.50"></text></g><g><title>std::sys::path::unix::is_sep_byte (6,681,473,473 samples, 0.07%)</title><rect x="0.0591%" y="421" width="0.0677%" height="15" fill="rgb(248,212,6)" fg:x="5832689652" fg:w="6681473473"/><text x="0.3091%" y="431.50"></text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::search_tree (8,937,914,507 samples, 0.09%)</title><rect x="0.0453%" y="517" width="0.0906%" height="15" fill="rgb(208,68,35)" fg:x="4470367876" fg:w="8937914507"/><text x="0.2953%" y="527.50"></text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;&gt;::search_node (8,937,914,507 samples, 0.09%)</title><rect x="0.0453%" y="501" width="0.0906%" height="15" fill="rgb(232,128,0)" fg:x="4470367876" fg:w="8937914507"/><text x="0.2953%" y="511.50"></text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;&gt;::find_key_index (8,937,914,507 samples, 0.09%)</title><rect x="0.0453%" y="485" width="0.0906%" height="15" fill="rgb(207,160,47)" fg:x="4470367876" fg:w="8937914507"/><text x="0.2953%" y="495.50"></text></g><g><title>&lt;std::path::PathBuf as core::cmp::Ord&gt;::cmp (8,937,914,507 samples, 0.09%)</title><rect x="0.0453%" y="469" width="0.0906%" height="15" fill="rgb(228,23,34)" fg:x="4470367876" fg:w="8937914507"/><text x="0.2953%" y="479.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::entry (9,646,919,553 samples, 0.10%)</title><rect x="0.0453%" y="533" width="0.0978%" height="15" fill="rgb(218,30,26)" fg:x="4470367876" fg:w="9646919553"/><text x="0.2953%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;std::path::PathBuf&gt;&gt; (2,090,077,009 samples, 0.02%)</title><rect x="0.1435%" y="533" width="0.0212%" height="15" fill="rgb(220,122,19)" fg:x="14163085973" fg:w="2090077009"/><text x="0.3935%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;std::path::PathBuf&gt;&gt; (2,090,077,009 samples, 0.02%)</title><rect x="0.1435%" y="517" width="0.0212%" height="15" fill="rgb(250,228,42)" fg:x="14163085973" fg:w="2090077009"/><text x="0.3935%" y="527.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2,090,077,009 samples, 0.02%)</title><rect x="0.1435%" y="501" width="0.0212%" height="15" fill="rgb(240,193,28)" fg:x="14163085973" fg:w="2090077009"/><text x="0.3935%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (2,090,077,009 samples, 0.02%)</title><rect x="0.1435%" y="485" width="0.0212%" height="15" fill="rgb(216,20,37)" fg:x="14163085973" fg:w="2090077009"/><text x="0.3935%" y="495.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (2,090,077,009 samples, 0.02%)</title><rect x="0.1435%" y="469" width="0.0212%" height="15" fill="rgb(206,188,39)" fg:x="14163085973" fg:w="2090077009"/><text x="0.3935%" y="479.50"></text></g><g><title>alloc::alloc::dealloc (2,090,077,009 samples, 0.02%)</title><rect x="0.1435%" y="453" width="0.0212%" height="15" fill="rgb(217,207,13)" fg:x="14163085973" fg:w="2090077009"/><text x="0.3935%" y="463.50"></text></g><g><title>cfree@GLIBC_2.2.5 (2,090,077,009 samples, 0.02%)</title><rect x="0.1435%" y="437" width="0.0212%" height="15" fill="rgb(231,73,38)" fg:x="14163085973" fg:w="2090077009"/><text x="0.3935%" y="447.50"></text></g><g><title>_int_free_maybe_consolidate.part.0 (2,090,077,009 samples, 0.02%)</title><rect x="0.1435%" y="421" width="0.0212%" height="15" fill="rgb(225,20,46)" fg:x="14163085973" fg:w="2090077009"/><text x="0.3935%" y="431.50"></text></g><g><title>malloc_consolidate (2,090,077,009 samples, 0.02%)</title><rect x="0.1435%" y="405" width="0.0212%" height="15" fill="rgb(210,31,41)" fg:x="14163085973" fg:w="2090077009"/><text x="0.3935%" y="415.50"></text></g><g><title>&lt;std::path::PathBuf as core::clone::Clone&gt;::clone (9,224,185,739 samples, 0.09%)</title><rect x="0.1647%" y="517" width="0.0935%" height="15" fill="rgb(221,200,47)" fg:x="16253162982" fg:w="9224185739"/><text x="0.4147%" y="527.50"></text></g><g><title>&lt;std::ffi::os_str::OsString as core::clone::Clone&gt;::clone (9,224,185,739 samples, 0.09%)</title><rect x="0.1647%" y="501" width="0.0935%" height="15" fill="rgb(226,26,5)" fg:x="16253162982" fg:w="9224185739"/><text x="0.4147%" y="511.50"></text></g><g><title>&lt;std::sys::os_str::bytes::Buf as core::clone::Clone&gt;::clone (9,224,185,739 samples, 0.09%)</title><rect x="0.1647%" y="485" width="0.0935%" height="15" fill="rgb(249,33,26)" fg:x="16253162982" fg:w="9224185739"/><text x="0.4147%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (9,224,185,739 samples, 0.09%)</title><rect x="0.1647%" y="469" width="0.0935%" height="15" fill="rgb(235,183,28)" fg:x="16253162982" fg:w="9224185739"/><text x="0.4147%" y="479.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (9,224,185,739 samples, 0.09%)</title><rect x="0.1647%" y="453" width="0.0935%" height="15" fill="rgb(221,5,38)" fg:x="16253162982" fg:w="9224185739"/><text x="0.4147%" y="463.50"></text></g><g><title>alloc::slice::hack::to_vec (9,224,185,739 samples, 0.09%)</title><rect x="0.1647%" y="437" width="0.0935%" height="15" fill="rgb(247,18,42)" fg:x="16253162982" fg:w="9224185739"/><text x="0.4147%" y="447.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (9,224,185,739 samples, 0.09%)</title><rect x="0.1647%" y="421" width="0.0935%" height="15" fill="rgb(241,131,45)" fg:x="16253162982" fg:w="9224185739"/><text x="0.4147%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (9,224,185,739 samples, 0.09%)</title><rect x="0.1647%" y="405" width="0.0935%" height="15" fill="rgb(249,31,29)" fg:x="16253162982" fg:w="9224185739"/><text x="0.4147%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (9,224,185,739 samples, 0.09%)</title><rect x="0.1647%" y="389" width="0.0935%" height="15" fill="rgb(225,111,53)" fg:x="16253162982" fg:w="9224185739"/><text x="0.4147%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (9,224,185,739 samples, 0.09%)</title><rect x="0.1647%" y="373" width="0.0935%" height="15" fill="rgb(238,160,17)" fg:x="16253162982" fg:w="9224185739"/><text x="0.4147%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (9,224,185,739 samples, 0.09%)</title><rect x="0.1647%" y="357" width="0.0935%" height="15" fill="rgb(214,148,48)" fg:x="16253162982" fg:w="9224185739"/><text x="0.4147%" y="367.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (9,224,185,739 samples, 0.09%)</title><rect x="0.1647%" y="341" width="0.0935%" height="15" fill="rgb(232,36,49)" fg:x="16253162982" fg:w="9224185739"/><text x="0.4147%" y="351.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (9,224,185,739 samples, 0.09%)</title><rect x="0.1647%" y="325" width="0.0935%" height="15" fill="rgb(209,103,24)" fg:x="16253162982" fg:w="9224185739"/><text x="0.4147%" y="335.50"></text></g><g><title>alloc::alloc::alloc (9,224,185,739 samples, 0.09%)</title><rect x="0.1647%" y="309" width="0.0935%" height="15" fill="rgb(229,88,8)" fg:x="16253162982" fg:w="9224185739"/><text x="0.4147%" y="319.50"></text></g><g><title>malloc (9,224,185,739 samples, 0.09%)</title><rect x="0.1647%" y="293" width="0.0935%" height="15" fill="rgb(213,181,19)" fg:x="16253162982" fg:w="9224185739"/><text x="0.4147%" y="303.50"></text></g><g><title>_int_malloc (9,224,185,739 samples, 0.09%)</title><rect x="0.1647%" y="277" width="0.0935%" height="15" fill="rgb(254,191,54)" fg:x="16253162982" fg:w="9224185739"/><text x="0.4147%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (1,324,252,199 samples, 0.01%)</title><rect x="0.2582%" y="517" width="0.0134%" height="15" fill="rgb(241,83,37)" fg:x="25477348721" fg:w="1324252199"/><text x="0.5082%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (1,324,252,199 samples, 0.01%)</title><rect x="0.2582%" y="501" width="0.0134%" height="15" fill="rgb(233,36,39)" fg:x="25477348721" fg:w="1324252199"/><text x="0.5082%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_one (1,324,252,199 samples, 0.01%)</title><rect x="0.2582%" y="485" width="0.0134%" height="15" fill="rgb(226,3,54)" fg:x="25477348721" fg:w="1324252199"/><text x="0.5082%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_amortized (1,324,252,199 samples, 0.01%)</title><rect x="0.2582%" y="469" width="0.0134%" height="15" fill="rgb(245,192,40)" fg:x="25477348721" fg:w="1324252199"/><text x="0.5082%" y="479.50"></text></g><g><title>_ZN5alloc7raw_vec11finish_grow17hb963f69f0013fb2eE.llvm.7757775119285224340 (1,324,252,199 samples, 0.01%)</title><rect x="0.2582%" y="453" width="0.0134%" height="15" fill="rgb(238,167,29)" fg:x="25477348721" fg:w="1324252199"/><text x="0.5082%" y="463.50"></text></g><g><title>llvm_profparser::coverage::CoverageMappingInfo::get_files_from_id (13,054,630,886 samples, 0.13%)</title><rect x="0.1647%" y="533" width="0.1323%" height="15" fill="rgb(232,182,51)" fg:x="16253162982" fg:w="13054630886"/><text x="0.4147%" y="543.50"></text></g><g><title>std::path::Path::join (2,218,697,383 samples, 0.02%)</title><rect x="0.2745%" y="517" width="0.0225%" height="15" fill="rgb(231,60,39)" fg:x="27089096485" fg:w="2218697383"/><text x="0.5245%" y="527.50"></text></g><g><title>std::path::Path::_join (2,218,697,383 samples, 0.02%)</title><rect x="0.2745%" y="501" width="0.0225%" height="15" fill="rgb(208,69,12)" fg:x="27089096485" fg:w="2218697383"/><text x="0.5245%" y="511.50"></text></g><g><title>std::path::PathBuf::push (1,609,436,158 samples, 0.02%)</title><rect x="0.2807%" y="485" width="0.0163%" height="15" fill="rgb(235,93,37)" fg:x="27698357710" fg:w="1609436158"/><text x="0.5307%" y="495.50"></text></g><g><title>std::path::PathBuf::_push (1,609,436,158 samples, 0.02%)</title><rect x="0.2807%" y="469" width="0.0163%" height="15" fill="rgb(213,116,39)" fg:x="27698357710" fg:w="1609436158"/><text x="0.5307%" y="479.50"></text></g><g><title>std::ffi::os_str::OsString::push (1,609,436,158 samples, 0.02%)</title><rect x="0.2807%" y="453" width="0.0163%" height="15" fill="rgb(222,207,29)" fg:x="27698357710" fg:w="1609436158"/><text x="0.5307%" y="463.50"></text></g><g><title>std::sys::os_str::bytes::Buf::push_slice (1,609,436,158 samples, 0.02%)</title><rect x="0.2807%" y="437" width="0.0163%" height="15" fill="rgb(206,96,30)" fg:x="27698357710" fg:w="1609436158"/><text x="0.5307%" y="447.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1,609,436,158 samples, 0.02%)</title><rect x="0.2807%" y="421" width="0.0163%" height="15" fill="rgb(218,138,4)" fg:x="27698357710" fg:w="1609436158"/><text x="0.5307%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1,609,436,158 samples, 0.02%)</title><rect x="0.2807%" y="405" width="0.0163%" height="15" fill="rgb(250,191,14)" fg:x="27698357710" fg:w="1609436158"/><text x="0.5307%" y="415.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1,609,436,158 samples, 0.02%)</title><rect x="0.2807%" y="389" width="0.0163%" height="15" fill="rgb(239,60,40)" fg:x="27698357710" fg:w="1609436158"/><text x="0.5307%" y="399.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (1,609,436,158 samples, 0.02%)</title><rect x="0.2807%" y="373" width="0.0163%" height="15" fill="rgb(206,27,48)" fg:x="27698357710" fg:w="1609436158"/><text x="0.5307%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1,609,436,158 samples, 0.02%)</title><rect x="0.2807%" y="357" width="0.0163%" height="15" fill="rgb(225,35,8)" fg:x="27698357710" fg:w="1609436158"/><text x="0.5307%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve (1,609,436,158 samples, 0.02%)</title><rect x="0.2807%" y="341" width="0.0163%" height="15" fill="rgb(250,213,24)" fg:x="27698357710" fg:w="1609436158"/><text x="0.5307%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (1,609,436,158 samples, 0.02%)</title><rect x="0.2807%" y="325" width="0.0163%" height="15" fill="rgb(247,123,22)" fg:x="27698357710" fg:w="1609436158"/><text x="0.5307%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_amortized (1,370,038,204 samples, 0.01%)</title><rect x="0.2831%" y="309" width="0.0139%" height="15" fill="rgb(231,138,38)" fg:x="27937755664" fg:w="1370038204"/><text x="0.5331%" y="319.50"></text></g><g><title>llvm_profparser::coverage::coverage_mapping::CoverageMapping::get_simple_counters (2,405,703,271 samples, 0.02%)</title><rect x="0.2970%" y="533" width="0.0244%" height="15" fill="rgb(231,145,46)" fg:x="29307793868" fg:w="2405703271"/><text x="0.5470%" y="543.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::insert (2,405,703,271 samples, 0.02%)</title><rect x="0.2970%" y="517" width="0.0244%" height="15" fill="rgb(251,118,11)" fg:x="29307793868" fg:w="2405703271"/><text x="0.5470%" y="527.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (2,405,703,271 samples, 0.02%)</title><rect x="0.2970%" y="501" width="0.0244%" height="15" fill="rgb(217,147,25)" fg:x="29307793868" fg:w="2405703271"/><text x="0.5470%" y="511.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::find_or_find_insert_slot (2,405,703,271 samples, 0.02%)</title><rect x="0.2970%" y="485" width="0.0244%" height="15" fill="rgb(247,81,37)" fg:x="29307793868" fg:w="2405703271"/><text x="0.5470%" y="495.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find_or_find_insert_slot (2,405,703,271 samples, 0.02%)</title><rect x="0.2970%" y="469" width="0.0244%" height="15" fill="rgb(209,12,38)" fg:x="29307793868" fg:w="2405703271"/><text x="0.5470%" y="479.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve (2,405,703,271 samples, 0.02%)</title><rect x="0.2970%" y="453" width="0.0244%" height="15" fill="rgb(227,1,9)" fg:x="29307793868" fg:w="2405703271"/><text x="0.5470%" y="463.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (2,405,703,271 samples, 0.02%)</title><rect x="0.2970%" y="437" width="0.0244%" height="15" fill="rgb(248,47,43)" fg:x="29307793868" fg:w="2405703271"/><text x="0.5470%" y="447.50"></text></g><g><title>cargo_tarpaulin::process_handling::get_test_coverage (28,165,398,365 samples, 0.29%)</title><rect x="0.0369%" y="629" width="0.2854%" height="15" fill="rgb(221,10,30)" fg:x="3641099235" fg:w="28165398365"/><text x="0.2869%" y="639.50"></text></g><g><title>cargo_tarpaulin::process_handling::collect_coverage (28,165,398,365 samples, 0.29%)</title><rect x="0.0369%" y="613" width="0.2854%" height="15" fill="rgb(210,229,1)" fg:x="3641099235" fg:w="28165398365"/><text x="0.2869%" y="623.50"></text></g><g><title>cargo_tarpaulin::statemachine::TestState::step (28,165,398,365 samples, 0.29%)</title><rect x="0.0369%" y="597" width="0.2854%" height="15" fill="rgb(222,148,37)" fg:x="3641099235" fg:w="28165398365"/><text x="0.2869%" y="607.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;dyn cargo_tarpaulin::statemachine::StateData&gt; as cargo_tarpaulin::statemachine::StateData&gt;::wait (28,165,398,365 samples, 0.29%)</title><rect x="0.0369%" y="581" width="0.2854%" height="15" fill="rgb(234,67,33)" fg:x="3641099235" fg:w="28165398365"/><text x="0.2869%" y="591.50"></text></g><g><title>&lt;cargo_tarpaulin::statemachine::instrumented::LlvmInstrumentedData as cargo_tarpaulin::statemachine::StateData&gt;::wait (28,165,398,365 samples, 0.29%)</title><rect x="0.0369%" y="565" width="0.2854%" height="15" fill="rgb(247,98,35)" fg:x="3641099235" fg:w="28165398365"/><text x="0.2869%" y="575.50"></text></g><g><title>llvm_profparser::coverage::coverage_mapping::CoverageMapping::generate_subreport (27,336,129,724 samples, 0.28%)</title><rect x="0.0453%" y="549" width="0.2770%" height="15" fill="rgb(247,138,52)" fg:x="4470367876" fg:w="27336129724"/><text x="0.2953%" y="559.50"></text></g><g><title>_ZN3std2rt10lang_start28_$u7b$$u7b$closure$u7d$$u7d$17hcb362ac0c2fab2b3E.llvm.16397163363871860421 (28,445,784,511 samples, 0.29%)</title><rect x="0.0369%" y="757" width="0.2882%" height="15" fill="rgb(213,79,30)" fg:x="3641099235" fg:w="28445784511"/><text x="0.2869%" y="767.50"></text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (28,445,784,511 samples, 0.29%)</title><rect x="0.0369%" y="741" width="0.2882%" height="15" fill="rgb(246,177,23)" fg:x="3641099235" fg:w="28445784511"/><text x="0.2869%" y="751.50"></text></g><g><title>core::ops::function::FnOnce::call_once (28,445,784,511 samples, 0.29%)</title><rect x="0.0369%" y="725" width="0.2882%" height="15" fill="rgb(230,62,27)" fg:x="3641099235" fg:w="28445784511"/><text x="0.2869%" y="735.50"></text></g><g><title>cargo_tarpaulin::main (28,445,784,511 samples, 0.29%)</title><rect x="0.0369%" y="709" width="0.2882%" height="15" fill="rgb(216,154,8)" fg:x="3641099235" fg:w="28445784511"/><text x="0.2869%" y="719.50"></text></g><g><title>cargo_tarpaulin::run (28,445,784,511 samples, 0.29%)</title><rect x="0.0369%" y="693" width="0.2882%" height="15" fill="rgb(244,35,45)" fg:x="3641099235" fg:w="28445784511"/><text x="0.2869%" y="703.50"></text></g><g><title>cargo_tarpaulin::collect_tracemap (28,445,784,511 samples, 0.29%)</title><rect x="0.0369%" y="677" width="0.2882%" height="15" fill="rgb(251,115,12)" fg:x="3641099235" fg:w="28445784511"/><text x="0.2869%" y="687.50"></text></g><g><title>cargo_tarpaulin::trace (28,445,784,511 samples, 0.29%)</title><rect x="0.0369%" y="661" width="0.2882%" height="15" fill="rgb(240,54,50)" fg:x="3641099235" fg:w="28445784511"/><text x="0.2869%" y="671.50"></text></g><g><title>cargo_tarpaulin::launch_tarpaulin (28,445,784,511 samples, 0.29%)</title><rect x="0.0369%" y="645" width="0.2882%" height="15" fill="rgb(233,84,52)" fg:x="3641099235" fg:w="28445784511"/><text x="0.2869%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;llvm_profparser::instrumentation_profile::types::InstrumentationProfile&gt; (1,614,453,702 samples, 0.02%)</title><rect x="0.3283%" y="373" width="0.0164%" height="15" fill="rgb(207,117,47)" fg:x="32398102862" fg:w="1614453702"/><text x="0.5783%" y="383.50"></text></g><g><title>__libc_start_call_main (3,381,189,113 samples, 0.03%)</title><rect x="0.3252%" y="757" width="0.0343%" height="15" fill="rgb(249,43,39)" fg:x="32094020552" fg:w="3381189113"/><text x="0.5752%" y="767.50"></text></g><g><title>main (3,381,189,113 samples, 0.03%)</title><rect x="0.3252%" y="741" width="0.0343%" height="15" fill="rgb(209,38,44)" fg:x="32094020552" fg:w="3381189113"/><text x="0.5752%" y="751.50"></text></g><g><title>std::rt::lang_start_internal (3,381,189,113 samples, 0.03%)</title><rect x="0.3252%" y="725" width="0.0343%" height="15" fill="rgb(236,212,23)" fg:x="32094020552" fg:w="3381189113"/><text x="0.5752%" y="735.50"></text></g><g><title>std::panic::catch_unwind (3,381,189,113 samples, 0.03%)</title><rect x="0.3252%" y="709" width="0.0343%" height="15" fill="rgb(242,79,21)" fg:x="32094020552" fg:w="3381189113"/><text x="0.5752%" y="719.50"></text></g><g><title>std::panicking::try (3,381,189,113 samples, 0.03%)</title><rect x="0.3252%" y="693" width="0.0343%" height="15" fill="rgb(211,96,35)" fg:x="32094020552" fg:w="3381189113"/><text x="0.5752%" y="703.50"></text></g><g><title>std::panicking::try::do_call (3,381,189,113 samples, 0.03%)</title><rect x="0.3252%" y="677" width="0.0343%" height="15" fill="rgb(253,215,40)" fg:x="32094020552" fg:w="3381189113"/><text x="0.5752%" y="687.50"></text></g><g><title>std::rt::lang_start_internal::_{{closure}} (3,381,189,113 samples, 0.03%)</title><rect x="0.3252%" y="661" width="0.0343%" height="15" fill="rgb(211,81,21)" fg:x="32094020552" fg:w="3381189113"/><text x="0.5752%" y="671.50"></text></g><g><title>std::panic::catch_unwind (3,381,189,113 samples, 0.03%)</title><rect x="0.3252%" y="645" width="0.0343%" height="15" fill="rgb(208,190,38)" fg:x="32094020552" fg:w="3381189113"/><text x="0.5752%" y="655.50"></text></g><g><title>std::panicking::try (3,381,189,113 samples, 0.03%)</title><rect x="0.3252%" y="629" width="0.0343%" height="15" fill="rgb(235,213,38)" fg:x="32094020552" fg:w="3381189113"/><text x="0.5752%" y="639.50"></text></g><g><title>std::panicking::try::do_call (3,381,189,113 samples, 0.03%)</title><rect x="0.3252%" y="613" width="0.0343%" height="15" fill="rgb(237,122,38)" fg:x="32094020552" fg:w="3381189113"/><text x="0.5752%" y="623.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (3,381,189,113 samples, 0.03%)</title><rect x="0.3252%" y="597" width="0.0343%" height="15" fill="rgb(244,218,35)" fg:x="32094020552" fg:w="3381189113"/><text x="0.5752%" y="607.50"></text></g><g><title>_ZN3std2rt10lang_start28_$u7b$$u7b$closure$u7d$$u7d$17hcb362ac0c2fab2b3E.llvm.16397163363871860421 (3,381,189,113 samples, 0.03%)</title><rect x="0.3252%" y="581" width="0.0343%" height="15" fill="rgb(240,68,47)" fg:x="32094020552" fg:w="3381189113"/><text x="0.5752%" y="591.50"></text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (3,381,189,113 samples, 0.03%)</title><rect x="0.3252%" y="565" width="0.0343%" height="15" fill="rgb(210,16,53)" fg:x="32094020552" fg:w="3381189113"/><text x="0.5752%" y="575.50"></text></g><g><title>core::ops::function::FnOnce::call_once (3,381,189,113 samples, 0.03%)</title><rect x="0.3252%" y="549" width="0.0343%" height="15" fill="rgb(235,124,12)" fg:x="32094020552" fg:w="3381189113"/><text x="0.5752%" y="559.50"></text></g><g><title>cargo_tarpaulin::main (3,381,189,113 samples, 0.03%)</title><rect x="0.3252%" y="533" width="0.0343%" height="15" fill="rgb(224,169,11)" fg:x="32094020552" fg:w="3381189113"/><text x="0.5752%" y="543.50"></text></g><g><title>cargo_tarpaulin::run (3,381,189,113 samples, 0.03%)</title><rect x="0.3252%" y="517" width="0.0343%" height="15" fill="rgb(250,166,2)" fg:x="32094020552" fg:w="3381189113"/><text x="0.5752%" y="527.50"></text></g><g><title>cargo_tarpaulin::collect_tracemap (3,381,189,113 samples, 0.03%)</title><rect x="0.3252%" y="501" width="0.0343%" height="15" fill="rgb(242,216,29)" fg:x="32094020552" fg:w="3381189113"/><text x="0.5752%" y="511.50"></text></g><g><title>cargo_tarpaulin::trace (3,381,189,113 samples, 0.03%)</title><rect x="0.3252%" y="485" width="0.0343%" height="15" fill="rgb(230,116,27)" fg:x="32094020552" fg:w="3381189113"/><text x="0.5752%" y="495.50"></text></g><g><title>cargo_tarpaulin::launch_tarpaulin (3,381,189,113 samples, 0.03%)</title><rect x="0.3252%" y="469" width="0.0343%" height="15" fill="rgb(228,99,48)" fg:x="32094020552" fg:w="3381189113"/><text x="0.5752%" y="479.50"></text></g><g><title>cargo_tarpaulin::process_handling::get_test_coverage (3,381,189,113 samples, 0.03%)</title><rect x="0.3252%" y="453" width="0.0343%" height="15" fill="rgb(253,11,6)" fg:x="32094020552" fg:w="3381189113"/><text x="0.5752%" y="463.50"></text></g><g><title>cargo_tarpaulin::process_handling::collect_coverage (3,381,189,113 samples, 0.03%)</title><rect x="0.3252%" y="437" width="0.0343%" height="15" fill="rgb(247,143,39)" fg:x="32094020552" fg:w="3381189113"/><text x="0.5752%" y="447.50"></text></g><g><title>cargo_tarpaulin::statemachine::TestState::step (3,381,189,113 samples, 0.03%)</title><rect x="0.3252%" y="421" width="0.0343%" height="15" fill="rgb(236,97,10)" fg:x="32094020552" fg:w="3381189113"/><text x="0.5752%" y="431.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;dyn cargo_tarpaulin::statemachine::StateData&gt; as cargo_tarpaulin::statemachine::StateData&gt;::wait (3,381,189,113 samples, 0.03%)</title><rect x="0.3252%" y="405" width="0.0343%" height="15" fill="rgb(233,208,19)" fg:x="32094020552" fg:w="3381189113"/><text x="0.5752%" y="415.50"></text></g><g><title>&lt;cargo_tarpaulin::statemachine::instrumented::LlvmInstrumentedData as cargo_tarpaulin::statemachine::StateData&gt;::wait (3,381,189,113 samples, 0.03%)</title><rect x="0.3252%" y="389" width="0.0343%" height="15" fill="rgb(216,164,2)" fg:x="32094020552" fg:w="3381189113"/><text x="0.5752%" y="399.50"></text></g><g><title>core::slice::sort::unstable::quicksort::quicksort (1,462,653,101 samples, 0.01%)</title><rect x="0.3446%" y="373" width="0.0148%" height="15" fill="rgb(220,129,5)" fg:x="34012556564" fg:w="1462653101"/><text x="0.5946%" y="383.50"></text></g><g><title>core::slice::sort::unstable::quicksort::quicksort (1,462,653,101 samples, 0.01%)</title><rect x="0.3446%" y="357" width="0.0148%" height="15" fill="rgb(242,17,10)" fg:x="34012556564" fg:w="1462653101"/><text x="0.5946%" y="367.50"></text></g><g><title>core::slice::sort::unstable::quicksort::quicksort (1,462,653,101 samples, 0.01%)</title><rect x="0.3446%" y="341" width="0.0148%" height="15" fill="rgb(242,107,0)" fg:x="34012556564" fg:w="1462653101"/><text x="0.5946%" y="351.50"></text></g><g><title>core::slice::sort::unstable::quicksort::partition (1,138,438,927 samples, 0.01%)</title><rect x="0.3479%" y="325" width="0.0115%" height="15" fill="rgb(251,28,31)" fg:x="34336770738" fg:w="1138438927"/><text x="0.5979%" y="335.50"></text></g><g><title>core::slice::sort::unstable::quicksort::partition_lomuto_branchless_cyclic (999,180,449 samples, 0.01%)</title><rect x="0.3493%" y="309" width="0.0101%" height="15" fill="rgb(233,223,10)" fg:x="34476029216" fg:w="999180449"/><text x="0.5993%" y="319.50"></text></g><g><title>core::slice::sort::unstable::quicksort::partition_lomuto_branchless_cyclic::_{{closure}} (999,180,449 samples, 0.01%)</title><rect x="0.3493%" y="293" width="0.0101%" height="15" fill="rgb(215,21,27)" fg:x="34476029216" fg:w="999180449"/><text x="0.5993%" y="303.50"></text></g><g><title>cargo_tarpaulin::traces::TraceMap::add_trace (1,628,350,681 samples, 0.02%)</title><rect x="0.3604%" y="357" width="0.0165%" height="15" fill="rgb(232,23,21)" fg:x="35564973953" fg:w="1628350681"/><text x="0.6104%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;llvm_profparser::instrumentation_profile::types::Symtab&gt; (2,405,879,891 samples, 0.02%)</title><rect x="0.3993%" y="341" width="0.0244%" height="15" fill="rgb(244,5,23)" fg:x="39410132680" fg:w="2405879891"/><text x="0.6493%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::collections::hash::map::HashMap&lt;u64,alloc::string::String,core::hash::BuildHasherDefault&lt;rustc_hash::FxHasher&gt;&gt;&gt; (2,405,879,891 samples, 0.02%)</title><rect x="0.3993%" y="325" width="0.0244%" height="15" fill="rgb(226,81,46)" fg:x="39410132680" fg:w="2405879891"/><text x="0.6493%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::map::HashMap&lt;u64,alloc::string::String,core::hash::BuildHasherDefault&lt;rustc_hash::FxHasher&gt;&gt;&gt; (2,405,879,891 samples, 0.02%)</title><rect x="0.3993%" y="309" width="0.0244%" height="15" fill="rgb(247,70,30)" fg:x="39410132680" fg:w="2405879891"/><text x="0.6493%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::raw::RawTable&lt;(u64,alloc::string::String)&gt;&gt; (2,405,879,891 samples, 0.02%)</title><rect x="0.3993%" y="293" width="0.0244%" height="15" fill="rgb(212,68,19)" fg:x="39410132680" fg:w="2405879891"/><text x="0.6493%" y="303.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2,405,879,891 samples, 0.02%)</title><rect x="0.3993%" y="277" width="0.0244%" height="15" fill="rgb(240,187,13)" fg:x="39410132680" fg:w="2405879891"/><text x="0.6493%" y="287.50"></text></g><g><title>hashbrown::raw::RawTableInner::drop_inner_table (2,405,879,891 samples, 0.02%)</title><rect x="0.3993%" y="261" width="0.0244%" height="15" fill="rgb(223,113,26)" fg:x="39410132680" fg:w="2405879891"/><text x="0.6493%" y="271.50"></text></g><g><title>hashbrown::raw::RawTableInner::drop_elements (2,405,879,891 samples, 0.02%)</title><rect x="0.3993%" y="245" width="0.0244%" height="15" fill="rgb(206,192,2)" fg:x="39410132680" fg:w="2405879891"/><text x="0.6493%" y="255.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::drop (2,405,879,891 samples, 0.02%)</title><rect x="0.3993%" y="229" width="0.0244%" height="15" fill="rgb(241,108,4)" fg:x="39410132680" fg:w="2405879891"/><text x="0.6493%" y="239.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::drop_in_place (2,405,879,891 samples, 0.02%)</title><rect x="0.3993%" y="213" width="0.0244%" height="15" fill="rgb(247,173,49)" fg:x="39410132680" fg:w="2405879891"/><text x="0.6493%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;(u64,alloc::string::String)&gt; (2,405,879,891 samples, 0.02%)</title><rect x="0.3993%" y="197" width="0.0244%" height="15" fill="rgb(224,114,35)" fg:x="39410132680" fg:w="2405879891"/><text x="0.6493%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (2,405,879,891 samples, 0.02%)</title><rect x="0.3993%" y="181" width="0.0244%" height="15" fill="rgb(245,159,27)" fg:x="39410132680" fg:w="2405879891"/><text x="0.6493%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (2,405,879,891 samples, 0.02%)</title><rect x="0.3993%" y="165" width="0.0244%" height="15" fill="rgb(245,172,44)" fg:x="39410132680" fg:w="2405879891"/><text x="0.6493%" y="175.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (2,405,879,891 samples, 0.02%)</title><rect x="0.3993%" y="149" width="0.0244%" height="15" fill="rgb(236,23,11)" fg:x="39410132680" fg:w="2405879891"/><text x="0.6493%" y="159.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2,405,879,891 samples, 0.02%)</title><rect x="0.3993%" y="133" width="0.0244%" height="15" fill="rgb(205,117,38)" fg:x="39410132680" fg:w="2405879891"/><text x="0.6493%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (2,405,879,891 samples, 0.02%)</title><rect x="0.3993%" y="117" width="0.0244%" height="15" fill="rgb(237,72,25)" fg:x="39410132680" fg:w="2405879891"/><text x="0.6493%" y="127.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (2,405,879,891 samples, 0.02%)</title><rect x="0.3993%" y="101" width="0.0244%" height="15" fill="rgb(244,70,9)" fg:x="39410132680" fg:w="2405879891"/><text x="0.6493%" y="111.50"></text></g><g><title>alloc::alloc::dealloc (2,405,879,891 samples, 0.02%)</title><rect x="0.3993%" y="85" width="0.0244%" height="15" fill="rgb(217,125,39)" fg:x="39410132680" fg:w="2405879891"/><text x="0.6493%" y="95.50"></text></g><g><title>cfree@GLIBC_2.2.5 (2,405,879,891 samples, 0.02%)</title><rect x="0.3993%" y="69" width="0.0244%" height="15" fill="rgb(235,36,10)" fg:x="39410132680" fg:w="2405879891"/><text x="0.6493%" y="79.50"></text></g><g><title>_int_free_merge_chunk (2,362,291,205 samples, 0.02%)</title><rect x="0.3998%" y="53" width="0.0239%" height="15" fill="rgb(251,123,47)" fg:x="39453721366" fg:w="2362291205"/><text x="0.6498%" y="63.50"></text></g><g><title>_int_free_create_chunk (2,362,291,205 samples, 0.02%)</title><rect x="0.3998%" y="37" width="0.0239%" height="15" fill="rgb(221,13,13)" fg:x="39453721366" fg:w="2362291205"/><text x="0.6498%" y="47.50"></text></g><g><title>core::ptr::drop_in_place&lt;llvm_profparser::instrumentation_profile::types::InstrumentationProfile&gt; (5,118,016,003 samples, 0.05%)</title><rect x="0.3920%" y="357" width="0.0519%" height="15" fill="rgb(238,131,9)" fg:x="38689729025" fg:w="5118016003"/><text x="0.6420%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::collections::hash::map::HashMap&lt;alloc::string::String,usize,core::hash::BuildHasherDefault&lt;rustc_hash::FxHasher&gt;&gt;&gt; (1,991,732,457 samples, 0.02%)</title><rect x="0.4237%" y="341" width="0.0202%" height="15" fill="rgb(211,50,8)" fg:x="41816012571" fg:w="1991732457"/><text x="0.6737%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::map::HashMap&lt;alloc::string::String,usize,core::hash::BuildHasherDefault&lt;rustc_hash::FxHasher&gt;&gt;&gt; (1,991,732,457 samples, 0.02%)</title><rect x="0.4237%" y="325" width="0.0202%" height="15" fill="rgb(245,182,24)" fg:x="41816012571" fg:w="1991732457"/><text x="0.6737%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::raw::RawTable&lt;(alloc::string::String,usize)&gt;&gt; (1,991,732,457 samples, 0.02%)</title><rect x="0.4237%" y="309" width="0.0202%" height="15" fill="rgb(242,14,37)" fg:x="41816012571" fg:w="1991732457"/><text x="0.6737%" y="319.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1,991,732,457 samples, 0.02%)</title><rect x="0.4237%" y="293" width="0.0202%" height="15" fill="rgb(246,228,12)" fg:x="41816012571" fg:w="1991732457"/><text x="0.6737%" y="303.50"></text></g><g><title>hashbrown::raw::RawTableInner::drop_inner_table (1,991,732,457 samples, 0.02%)</title><rect x="0.4237%" y="277" width="0.0202%" height="15" fill="rgb(213,55,15)" fg:x="41816012571" fg:w="1991732457"/><text x="0.6737%" y="287.50"></text></g><g><title>hashbrown::raw::RawTableInner::drop_elements (1,991,732,457 samples, 0.02%)</title><rect x="0.4237%" y="261" width="0.0202%" height="15" fill="rgb(209,9,3)" fg:x="41816012571" fg:w="1991732457"/><text x="0.6737%" y="271.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::drop (1,991,732,457 samples, 0.02%)</title><rect x="0.4237%" y="245" width="0.0202%" height="15" fill="rgb(230,59,30)" fg:x="41816012571" fg:w="1991732457"/><text x="0.6737%" y="255.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::drop_in_place (1,991,732,457 samples, 0.02%)</title><rect x="0.4237%" y="229" width="0.0202%" height="15" fill="rgb(209,121,21)" fg:x="41816012571" fg:w="1991732457"/><text x="0.6737%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::string::String,usize)&gt; (1,991,732,457 samples, 0.02%)</title><rect x="0.4237%" y="213" width="0.0202%" height="15" fill="rgb(220,109,13)" fg:x="41816012571" fg:w="1991732457"/><text x="0.6737%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (1,991,732,457 samples, 0.02%)</title><rect x="0.4237%" y="197" width="0.0202%" height="15" fill="rgb(232,18,1)" fg:x="41816012571" fg:w="1991732457"/><text x="0.6737%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (1,991,732,457 samples, 0.02%)</title><rect x="0.4237%" y="181" width="0.0202%" height="15" fill="rgb(215,41,42)" fg:x="41816012571" fg:w="1991732457"/><text x="0.6737%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (1,991,732,457 samples, 0.02%)</title><rect x="0.4237%" y="165" width="0.0202%" height="15" fill="rgb(224,123,36)" fg:x="41816012571" fg:w="1991732457"/><text x="0.6737%" y="175.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1,991,732,457 samples, 0.02%)</title><rect x="0.4237%" y="149" width="0.0202%" height="15" fill="rgb(240,125,3)" fg:x="41816012571" fg:w="1991732457"/><text x="0.6737%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (1,991,732,457 samples, 0.02%)</title><rect x="0.4237%" y="133" width="0.0202%" height="15" fill="rgb(205,98,50)" fg:x="41816012571" fg:w="1991732457"/><text x="0.6737%" y="143.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1,991,732,457 samples, 0.02%)</title><rect x="0.4237%" y="117" width="0.0202%" height="15" fill="rgb(205,185,37)" fg:x="41816012571" fg:w="1991732457"/><text x="0.6737%" y="127.50"></text></g><g><title>alloc::alloc::dealloc (1,991,732,457 samples, 0.02%)</title><rect x="0.4237%" y="101" width="0.0202%" height="15" fill="rgb(238,207,15)" fg:x="41816012571" fg:w="1991732457"/><text x="0.6737%" y="111.50"></text></g><g><title>cfree@GLIBC_2.2.5 (1,991,732,457 samples, 0.02%)</title><rect x="0.4237%" y="85" width="0.0202%" height="15" fill="rgb(213,199,42)" fg:x="41816012571" fg:w="1991732457"/><text x="0.6737%" y="95.50"></text></g><g><title>_int_free_merge_chunk (1,991,732,457 samples, 0.02%)</title><rect x="0.4237%" y="69" width="0.0202%" height="15" fill="rgb(235,201,11)" fg:x="41816012571" fg:w="1991732457"/><text x="0.6737%" y="79.50"></text></g><g><title>_int_free_create_chunk (1,991,732,457 samples, 0.02%)</title><rect x="0.4237%" y="53" width="0.0202%" height="15" fill="rgb(207,46,11)" fg:x="41816012571" fg:w="1991732457"/><text x="0.6737%" y="63.50"></text></g><g><title>unlink_chunk.isra.0 (1,072,748,527 samples, 0.01%)</title><rect x="0.4330%" y="37" width="0.0109%" height="15" fill="rgb(241,35,35)" fg:x="42734996501" fg:w="1072748527"/><text x="0.6830%" y="47.50"></text></g><g><title>core::slice::sort::unstable::quicksort::partition (1,460,168,516 samples, 0.01%)</title><rect x="0.4453%" y="325" width="0.0148%" height="15" fill="rgb(243,32,47)" fg:x="43944053529" fg:w="1460168516"/><text x="0.6953%" y="335.50"></text></g><g><title>core::slice::sort::unstable::quicksort::partition_lomuto_branchless_cyclic (1,325,966,136 samples, 0.01%)</title><rect x="0.4466%" y="309" width="0.0134%" height="15" fill="rgb(247,202,23)" fg:x="44078255909" fg:w="1325966136"/><text x="0.6966%" y="319.50"></text></g><g><title>core::slice::sort::unstable::quicksort::partition_lomuto_branchless_cyclic::_{{closure}} (1,325,966,136 samples, 0.01%)</title><rect x="0.4466%" y="293" width="0.0134%" height="15" fill="rgb(219,102,11)" fg:x="44078255909" fg:w="1325966136"/><text x="0.6966%" y="303.50"></text></g><g><title>cargo_tarpaulin::process_handling::get_test_coverage (9,975,612,913 samples, 0.10%)</title><rect x="0.3595%" y="437" width="0.1011%" height="15" fill="rgb(243,110,44)" fg:x="35475209665" fg:w="9975612913"/><text x="0.6095%" y="447.50"></text></g><g><title>cargo_tarpaulin::process_handling::collect_coverage (9,975,612,913 samples, 0.10%)</title><rect x="0.3595%" y="421" width="0.1011%" height="15" fill="rgb(222,74,54)" fg:x="35475209665" fg:w="9975612913"/><text x="0.6095%" y="431.50"></text></g><g><title>cargo_tarpaulin::statemachine::TestState::step (9,975,612,913 samples, 0.10%)</title><rect x="0.3595%" y="405" width="0.1011%" height="15" fill="rgb(216,99,12)" fg:x="35475209665" fg:w="9975612913"/><text x="0.6095%" y="415.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;dyn cargo_tarpaulin::statemachine::StateData&gt; as cargo_tarpaulin::statemachine::StateData&gt;::wait (9,975,612,913 samples, 0.10%)</title><rect x="0.3595%" y="389" width="0.1011%" height="15" fill="rgb(226,22,26)" fg:x="35475209665" fg:w="9975612913"/><text x="0.6095%" y="399.50"></text></g><g><title>&lt;cargo_tarpaulin::statemachine::instrumented::LlvmInstrumentedData as cargo_tarpaulin::statemachine::StateData&gt;::wait (9,975,612,913 samples, 0.10%)</title><rect x="0.3595%" y="373" width="0.1011%" height="15" fill="rgb(217,163,10)" fg:x="35475209665" fg:w="9975612913"/><text x="0.6095%" y="383.50"></text></g><g><title>core::slice::sort::unstable::quicksort::quicksort (1,643,077,550 samples, 0.02%)</title><rect x="0.4439%" y="357" width="0.0166%" height="15" fill="rgb(213,25,53)" fg:x="43807745028" fg:w="1643077550"/><text x="0.6939%" y="367.50"></text></g><g><title>core::slice::sort::unstable::quicksort::quicksort (1,643,077,550 samples, 0.02%)</title><rect x="0.4439%" y="341" width="0.0166%" height="15" fill="rgb(252,105,26)" fg:x="43807745028" fg:w="1643077550"/><text x="0.6939%" y="351.50"></text></g><g><title>__libc_start_main@@GLIBC_2.34 (10,024,090,354 samples, 0.10%)</title><rect x="0.3595%" y="757" width="0.1016%" height="15" fill="rgb(220,39,43)" fg:x="35475209665" fg:w="10024090354"/><text x="0.6095%" y="767.50"></text></g><g><title>__libc_start_call_main (10,024,090,354 samples, 0.10%)</title><rect x="0.3595%" y="741" width="0.1016%" height="15" fill="rgb(229,68,48)" fg:x="35475209665" fg:w="10024090354"/><text x="0.6095%" y="751.50"></text></g><g><title>main (10,024,090,354 samples, 0.10%)</title><rect x="0.3595%" y="725" width="0.1016%" height="15" fill="rgb(252,8,32)" fg:x="35475209665" fg:w="10024090354"/><text x="0.6095%" y="735.50"></text></g><g><title>std::rt::lang_start_internal (10,024,090,354 samples, 0.10%)</title><rect x="0.3595%" y="709" width="0.1016%" height="15" fill="rgb(223,20,43)" fg:x="35475209665" fg:w="10024090354"/><text x="0.6095%" y="719.50"></text></g><g><title>std::panic::catch_unwind (10,024,090,354 samples, 0.10%)</title><rect x="0.3595%" y="693" width="0.1016%" height="15" fill="rgb(229,81,49)" fg:x="35475209665" fg:w="10024090354"/><text x="0.6095%" y="703.50"></text></g><g><title>std::panicking::try (10,024,090,354 samples, 0.10%)</title><rect x="0.3595%" y="677" width="0.1016%" height="15" fill="rgb(236,28,36)" fg:x="35475209665" fg:w="10024090354"/><text x="0.6095%" y="687.50"></text></g><g><title>std::panicking::try::do_call (10,024,090,354 samples, 0.10%)</title><rect x="0.3595%" y="661" width="0.1016%" height="15" fill="rgb(249,185,26)" fg:x="35475209665" fg:w="10024090354"/><text x="0.6095%" y="671.50"></text></g><g><title>std::rt::lang_start_internal::_{{closure}} (10,024,090,354 samples, 0.10%)</title><rect x="0.3595%" y="645" width="0.1016%" height="15" fill="rgb(249,174,33)" fg:x="35475209665" fg:w="10024090354"/><text x="0.6095%" y="655.50"></text></g><g><title>std::panic::catch_unwind (10,024,090,354 samples, 0.10%)</title><rect x="0.3595%" y="629" width="0.1016%" height="15" fill="rgb(233,201,37)" fg:x="35475209665" fg:w="10024090354"/><text x="0.6095%" y="639.50"></text></g><g><title>std::panicking::try (10,024,090,354 samples, 0.10%)</title><rect x="0.3595%" y="613" width="0.1016%" height="15" fill="rgb(221,78,26)" fg:x="35475209665" fg:w="10024090354"/><text x="0.6095%" y="623.50"></text></g><g><title>std::panicking::try::do_call (10,024,090,354 samples, 0.10%)</title><rect x="0.3595%" y="597" width="0.1016%" height="15" fill="rgb(250,127,30)" fg:x="35475209665" fg:w="10024090354"/><text x="0.6095%" y="607.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (10,024,090,354 samples, 0.10%)</title><rect x="0.3595%" y="581" width="0.1016%" height="15" fill="rgb(230,49,44)" fg:x="35475209665" fg:w="10024090354"/><text x="0.6095%" y="591.50"></text></g><g><title>_ZN3std2rt10lang_start28_$u7b$$u7b$closure$u7d$$u7d$17hcb362ac0c2fab2b3E.llvm.16397163363871860421 (10,024,090,354 samples, 0.10%)</title><rect x="0.3595%" y="565" width="0.1016%" height="15" fill="rgb(229,67,23)" fg:x="35475209665" fg:w="10024090354"/><text x="0.6095%" y="575.50"></text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (10,024,090,354 samples, 0.10%)</title><rect x="0.3595%" y="549" width="0.1016%" height="15" fill="rgb(249,83,47)" fg:x="35475209665" fg:w="10024090354"/><text x="0.6095%" y="559.50"></text></g><g><title>core::ops::function::FnOnce::call_once (10,024,090,354 samples, 0.10%)</title><rect x="0.3595%" y="533" width="0.1016%" height="15" fill="rgb(215,43,3)" fg:x="35475209665" fg:w="10024090354"/><text x="0.6095%" y="543.50"></text></g><g><title>cargo_tarpaulin::main (10,024,090,354 samples, 0.10%)</title><rect x="0.3595%" y="517" width="0.1016%" height="15" fill="rgb(238,154,13)" fg:x="35475209665" fg:w="10024090354"/><text x="0.6095%" y="527.50"></text></g><g><title>cargo_tarpaulin::run (10,024,090,354 samples, 0.10%)</title><rect x="0.3595%" y="501" width="0.1016%" height="15" fill="rgb(219,56,2)" fg:x="35475209665" fg:w="10024090354"/><text x="0.6095%" y="511.50"></text></g><g><title>cargo_tarpaulin::collect_tracemap (10,024,090,354 samples, 0.10%)</title><rect x="0.3595%" y="485" width="0.1016%" height="15" fill="rgb(233,0,4)" fg:x="35475209665" fg:w="10024090354"/><text x="0.6095%" y="495.50"></text></g><g><title>cargo_tarpaulin::trace (10,024,090,354 samples, 0.10%)</title><rect x="0.3595%" y="469" width="0.1016%" height="15" fill="rgb(235,30,7)" fg:x="35475209665" fg:w="10024090354"/><text x="0.6095%" y="479.50"></text></g><g><title>cargo_tarpaulin::launch_tarpaulin (10,024,090,354 samples, 0.10%)</title><rect x="0.3595%" y="453" width="0.1016%" height="15" fill="rgb(250,79,13)" fg:x="35475209665" fg:w="10024090354"/><text x="0.6095%" y="463.50"></text></g><g><title>cargo_tarpaulin::source_analysis::LineAnalysis::should_ignore (1,754,477,893 samples, 0.02%)</title><rect x="0.4685%" y="341" width="0.0178%" height="15" fill="rgb(211,146,34)" fg:x="46233205809" fg:w="1754477893"/><text x="0.7185%" y="351.50"></text></g><g><title>std::collections::hash::set::HashSet&lt;T,S&gt;::contains (1,706,771,305 samples, 0.02%)</title><rect x="0.4690%" y="325" width="0.0173%" height="15" fill="rgb(228,22,38)" fg:x="46280912397" fg:w="1706771305"/><text x="0.7190%" y="335.50"></text></g><g><title>hashbrown::set::HashSet&lt;T,S,A&gt;::contains (1,706,771,305 samples, 0.02%)</title><rect x="0.4690%" y="309" width="0.0173%" height="15" fill="rgb(235,168,5)" fg:x="46280912397" fg:w="1706771305"/><text x="0.7190%" y="319.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::contains_key (1,706,771,305 samples, 0.02%)</title><rect x="0.4690%" y="293" width="0.0173%" height="15" fill="rgb(221,155,16)" fg:x="46280912397" fg:w="1706771305"/><text x="0.7190%" y="303.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (1,706,771,305 samples, 0.02%)</title><rect x="0.4690%" y="277" width="0.0173%" height="15" fill="rgb(215,215,53)" fg:x="46280912397" fg:w="1706771305"/><text x="0.7190%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;llvm_profparser::coverage::coverage_mapping::CoverageMapping&gt; (1,350,699,221 samples, 0.01%)</title><rect x="0.4863%" y="341" width="0.0137%" height="15" fill="rgb(223,4,10)" fg:x="47987683702" fg:w="1350699221"/><text x="0.7363%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;llvm_profparser::coverage::CoverageMappingInfo&gt;&gt; (1,350,699,221 samples, 0.01%)</title><rect x="0.4863%" y="325" width="0.0137%" height="15" fill="rgb(234,103,6)" fg:x="47987683702" fg:w="1350699221"/><text x="0.7363%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1,350,699,221 samples, 0.01%)</title><rect x="0.4863%" y="309" width="0.0137%" height="15" fill="rgb(227,97,0)" fg:x="47987683702" fg:w="1350699221"/><text x="0.7363%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;[llvm_profparser::coverage::CoverageMappingInfo]&gt; (1,350,699,221 samples, 0.01%)</title><rect x="0.4863%" y="293" width="0.0137%" height="15" fill="rgb(234,150,53)" fg:x="47987683702" fg:w="1350699221"/><text x="0.7363%" y="303.50"></text></g><g><title>_ZN4core3ptr67drop_in_place$LT$llvm_profparser..coverage..CoverageMappingInfo$GT$17ha2f9364ad30b8fecE.llvm.18070590721538617638 (1,350,699,221 samples, 0.01%)</title><rect x="0.4863%" y="277" width="0.0137%" height="15" fill="rgb(228,201,54)" fg:x="47987683702" fg:w="1350699221"/><text x="0.7363%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;llvm_profparser::coverage::FunctionRecordV3&gt;&gt; (1,350,699,221 samples, 0.01%)</title><rect x="0.4863%" y="261" width="0.0137%" height="15" fill="rgb(222,22,37)" fg:x="47987683702" fg:w="1350699221"/><text x="0.7363%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1,350,699,221 samples, 0.01%)</title><rect x="0.4863%" y="245" width="0.0137%" height="15" fill="rgb(237,53,32)" fg:x="47987683702" fg:w="1350699221"/><text x="0.7363%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;[llvm_profparser::coverage::FunctionRecordV3]&gt; (1,350,699,221 samples, 0.01%)</title><rect x="0.4863%" y="229" width="0.0137%" height="15" fill="rgb(233,25,53)" fg:x="47987683702" fg:w="1350699221"/><text x="0.7363%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;llvm_profparser::coverage::FunctionRecordV3&gt; (1,350,699,221 samples, 0.01%)</title><rect x="0.4863%" y="213" width="0.0137%" height="15" fill="rgb(210,40,34)" fg:x="47987683702" fg:w="1350699221"/><text x="0.7363%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;alloc::string::String&gt;&gt; (1,079,996,008 samples, 0.01%)</title><rect x="0.5023%" y="261" width="0.0109%" height="15" fill="rgb(241,220,44)" fg:x="49570267003" fg:w="1079996008"/><text x="0.7523%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (1,038,555,937 samples, 0.01%)</title><rect x="0.5027%" y="245" width="0.0105%" height="15" fill="rgb(235,28,35)" fg:x="49611707074" fg:w="1038555937"/><text x="0.7527%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (1,038,555,937 samples, 0.01%)</title><rect x="0.5027%" y="229" width="0.0105%" height="15" fill="rgb(210,56,17)" fg:x="49611707074" fg:w="1038555937"/><text x="0.7527%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (1,038,555,937 samples, 0.01%)</title><rect x="0.5027%" y="213" width="0.0105%" height="15" fill="rgb(224,130,29)" fg:x="49611707074" fg:w="1038555937"/><text x="0.7527%" y="223.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1,038,555,937 samples, 0.01%)</title><rect x="0.5027%" y="197" width="0.0105%" height="15" fill="rgb(235,212,8)" fg:x="49611707074" fg:w="1038555937"/><text x="0.7527%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (1,038,555,937 samples, 0.01%)</title><rect x="0.5027%" y="181" width="0.0105%" height="15" fill="rgb(223,33,50)" fg:x="49611707074" fg:w="1038555937"/><text x="0.7527%" y="191.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1,038,555,937 samples, 0.01%)</title><rect x="0.5027%" y="165" width="0.0105%" height="15" fill="rgb(219,149,13)" fg:x="49611707074" fg:w="1038555937"/><text x="0.7527%" y="175.50"></text></g><g><title>alloc::alloc::dealloc (1,038,555,937 samples, 0.01%)</title><rect x="0.5027%" y="149" width="0.0105%" height="15" fill="rgb(250,156,29)" fg:x="49611707074" fg:w="1038555937"/><text x="0.7527%" y="159.50"></text></g><g><title>cfree@GLIBC_2.2.5 (1,038,555,937 samples, 0.01%)</title><rect x="0.5027%" y="133" width="0.0105%" height="15" fill="rgb(216,193,19)" fg:x="49611707074" fg:w="1038555937"/><text x="0.7527%" y="143.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;llvm_profparser::instrumentation_profile::types::NamedInstrProfRecord&gt;&gt; (1,815,778,087 samples, 0.02%)</title><rect x="0.5023%" y="325" width="0.0184%" height="15" fill="rgb(216,135,14)" fg:x="49570267003" fg:w="1815778087"/><text x="0.7523%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1,815,778,087 samples, 0.02%)</title><rect x="0.5023%" y="309" width="0.0184%" height="15" fill="rgb(241,47,5)" fg:x="49570267003" fg:w="1815778087"/><text x="0.7523%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;[llvm_profparser::instrumentation_profile::types::NamedInstrProfRecord]&gt; (1,815,778,087 samples, 0.02%)</title><rect x="0.5023%" y="293" width="0.0184%" height="15" fill="rgb(233,42,35)" fg:x="49570267003" fg:w="1815778087"/><text x="0.7523%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;llvm_profparser::instrumentation_profile::types::NamedInstrProfRecord&gt; (1,815,778,087 samples, 0.02%)</title><rect x="0.5023%" y="277" width="0.0184%" height="15" fill="rgb(231,13,6)" fg:x="49570267003" fg:w="1815778087"/><text x="0.7523%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;llvm_profparser::instrumentation_profile::types::Symtab&gt; (3,075,182,263 samples, 0.03%)</title><rect x="0.5207%" y="325" width="0.0312%" height="15" fill="rgb(207,181,40)" fg:x="51386045090" fg:w="3075182263"/><text x="0.7707%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::collections::hash::map::HashMap&lt;u64,alloc::string::String,core::hash::BuildHasherDefault&lt;rustc_hash::FxHasher&gt;&gt;&gt; (3,075,182,263 samples, 0.03%)</title><rect x="0.5207%" y="309" width="0.0312%" height="15" fill="rgb(254,173,49)" fg:x="51386045090" fg:w="3075182263"/><text x="0.7707%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::map::HashMap&lt;u64,alloc::string::String,core::hash::BuildHasherDefault&lt;rustc_hash::FxHasher&gt;&gt;&gt; (3,075,182,263 samples, 0.03%)</title><rect x="0.5207%" y="293" width="0.0312%" height="15" fill="rgb(221,1,38)" fg:x="51386045090" fg:w="3075182263"/><text x="0.7707%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::raw::RawTable&lt;(u64,alloc::string::String)&gt;&gt; (3,075,182,263 samples, 0.03%)</title><rect x="0.5207%" y="277" width="0.0312%" height="15" fill="rgb(206,124,46)" fg:x="51386045090" fg:w="3075182263"/><text x="0.7707%" y="287.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3,075,182,263 samples, 0.03%)</title><rect x="0.5207%" y="261" width="0.0312%" height="15" fill="rgb(249,21,11)" fg:x="51386045090" fg:w="3075182263"/><text x="0.7707%" y="271.50"></text></g><g><title>hashbrown::raw::RawTableInner::drop_inner_table (3,075,182,263 samples, 0.03%)</title><rect x="0.5207%" y="245" width="0.0312%" height="15" fill="rgb(222,201,40)" fg:x="51386045090" fg:w="3075182263"/><text x="0.7707%" y="255.50"></text></g><g><title>hashbrown::raw::RawTableInner::drop_elements (3,075,182,263 samples, 0.03%)</title><rect x="0.5207%" y="229" width="0.0312%" height="15" fill="rgb(235,61,29)" fg:x="51386045090" fg:w="3075182263"/><text x="0.7707%" y="239.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::drop (3,024,941,800 samples, 0.03%)</title><rect x="0.5212%" y="213" width="0.0307%" height="15" fill="rgb(219,207,3)" fg:x="51436285553" fg:w="3024941800"/><text x="0.7712%" y="223.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::drop_in_place (3,024,941,800 samples, 0.03%)</title><rect x="0.5212%" y="197" width="0.0307%" height="15" fill="rgb(222,56,46)" fg:x="51436285553" fg:w="3024941800"/><text x="0.7712%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;(u64,alloc::string::String)&gt; (3,024,941,800 samples, 0.03%)</title><rect x="0.5212%" y="181" width="0.0307%" height="15" fill="rgb(239,76,54)" fg:x="51436285553" fg:w="3024941800"/><text x="0.7712%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (3,024,941,800 samples, 0.03%)</title><rect x="0.5212%" y="165" width="0.0307%" height="15" fill="rgb(231,124,27)" fg:x="51436285553" fg:w="3024941800"/><text x="0.7712%" y="175.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (3,024,941,800 samples, 0.03%)</title><rect x="0.5212%" y="149" width="0.0307%" height="15" fill="rgb(249,195,6)" fg:x="51436285553" fg:w="3024941800"/><text x="0.7712%" y="159.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (3,024,941,800 samples, 0.03%)</title><rect x="0.5212%" y="133" width="0.0307%" height="15" fill="rgb(237,174,47)" fg:x="51436285553" fg:w="3024941800"/><text x="0.7712%" y="143.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3,024,941,800 samples, 0.03%)</title><rect x="0.5212%" y="117" width="0.0307%" height="15" fill="rgb(206,201,31)" fg:x="51436285553" fg:w="3024941800"/><text x="0.7712%" y="127.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (2,927,708,307 samples, 0.03%)</title><rect x="0.5222%" y="101" width="0.0297%" height="15" fill="rgb(231,57,52)" fg:x="51533519046" fg:w="2927708307"/><text x="0.7722%" y="111.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (2,927,708,307 samples, 0.03%)</title><rect x="0.5222%" y="85" width="0.0297%" height="15" fill="rgb(248,177,22)" fg:x="51533519046" fg:w="2927708307"/><text x="0.7722%" y="95.50"></text></g><g><title>alloc::alloc::dealloc (2,927,708,307 samples, 0.03%)</title><rect x="0.5222%" y="69" width="0.0297%" height="15" fill="rgb(215,211,37)" fg:x="51533519046" fg:w="2927708307"/><text x="0.7722%" y="79.50"></text></g><g><title>cfree@GLIBC_2.2.5 (2,927,708,307 samples, 0.03%)</title><rect x="0.5222%" y="53" width="0.0297%" height="15" fill="rgb(241,128,51)" fg:x="51533519046" fg:w="2927708307"/><text x="0.7722%" y="63.50"></text></g><g><title>_int_free_merge_chunk (1,989,722,171 samples, 0.02%)</title><rect x="0.5317%" y="37" width="0.0202%" height="15" fill="rgb(227,165,31)" fg:x="52471505182" fg:w="1989722171"/><text x="0.7817%" y="47.50"></text></g><g><title>core::ptr::drop_in_place&lt;llvm_profparser::instrumentation_profile::types::InstrumentationProfile&gt; (8,977,087,935 samples, 0.09%)</title><rect x="0.5023%" y="341" width="0.0910%" height="15" fill="rgb(228,167,24)" fg:x="49570267003" fg:w="8977087935"/><text x="0.7523%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::collections::hash::map::HashMap&lt;alloc::string::String,usize,core::hash::BuildHasherDefault&lt;rustc_hash::FxHasher&gt;&gt;&gt; (4,086,127,585 samples, 0.04%)</title><rect x="0.5519%" y="325" width="0.0414%" height="15" fill="rgb(228,143,12)" fg:x="54461227353" fg:w="4086127585"/><text x="0.8019%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::map::HashMap&lt;alloc::string::String,usize,core::hash::BuildHasherDefault&lt;rustc_hash::FxHasher&gt;&gt;&gt; (4,086,127,585 samples, 0.04%)</title><rect x="0.5519%" y="309" width="0.0414%" height="15" fill="rgb(249,149,8)" fg:x="54461227353" fg:w="4086127585"/><text x="0.8019%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::raw::RawTable&lt;(alloc::string::String,usize)&gt;&gt; (4,086,127,585 samples, 0.04%)</title><rect x="0.5519%" y="293" width="0.0414%" height="15" fill="rgb(243,35,44)" fg:x="54461227353" fg:w="4086127585"/><text x="0.8019%" y="303.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (4,086,127,585 samples, 0.04%)</title><rect x="0.5519%" y="277" width="0.0414%" height="15" fill="rgb(246,89,9)" fg:x="54461227353" fg:w="4086127585"/><text x="0.8019%" y="287.50"></text></g><g><title>hashbrown::raw::RawTableInner::drop_inner_table (4,086,127,585 samples, 0.04%)</title><rect x="0.5519%" y="261" width="0.0414%" height="15" fill="rgb(233,213,13)" fg:x="54461227353" fg:w="4086127585"/><text x="0.8019%" y="271.50"></text></g><g><title>hashbrown::raw::RawTableInner::drop_elements (4,086,127,585 samples, 0.04%)</title><rect x="0.5519%" y="245" width="0.0414%" height="15" fill="rgb(233,141,41)" fg:x="54461227353" fg:w="4086127585"/><text x="0.8019%" y="255.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::drop (4,035,855,584 samples, 0.04%)</title><rect x="0.5524%" y="229" width="0.0409%" height="15" fill="rgb(239,167,4)" fg:x="54511499354" fg:w="4035855584"/><text x="0.8024%" y="239.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::drop_in_place (4,035,855,584 samples, 0.04%)</title><rect x="0.5524%" y="213" width="0.0409%" height="15" fill="rgb(209,217,16)" fg:x="54511499354" fg:w="4035855584"/><text x="0.8024%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::string::String,usize)&gt; (4,035,855,584 samples, 0.04%)</title><rect x="0.5524%" y="197" width="0.0409%" height="15" fill="rgb(219,88,35)" fg:x="54511499354" fg:w="4035855584"/><text x="0.8024%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (4,035,855,584 samples, 0.04%)</title><rect x="0.5524%" y="181" width="0.0409%" height="15" fill="rgb(220,193,23)" fg:x="54511499354" fg:w="4035855584"/><text x="0.8024%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (4,035,855,584 samples, 0.04%)</title><rect x="0.5524%" y="165" width="0.0409%" height="15" fill="rgb(230,90,52)" fg:x="54511499354" fg:w="4035855584"/><text x="0.8024%" y="175.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (4,035,855,584 samples, 0.04%)</title><rect x="0.5524%" y="149" width="0.0409%" height="15" fill="rgb(252,106,19)" fg:x="54511499354" fg:w="4035855584"/><text x="0.8024%" y="159.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (4,035,855,584 samples, 0.04%)</title><rect x="0.5524%" y="133" width="0.0409%" height="15" fill="rgb(206,74,20)" fg:x="54511499354" fg:w="4035855584"/><text x="0.8024%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (4,035,855,584 samples, 0.04%)</title><rect x="0.5524%" y="117" width="0.0409%" height="15" fill="rgb(230,138,44)" fg:x="54511499354" fg:w="4035855584"/><text x="0.8024%" y="127.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (4,035,855,584 samples, 0.04%)</title><rect x="0.5524%" y="101" width="0.0409%" height="15" fill="rgb(235,182,43)" fg:x="54511499354" fg:w="4035855584"/><text x="0.8024%" y="111.50"></text></g><g><title>alloc::alloc::dealloc (4,035,855,584 samples, 0.04%)</title><rect x="0.5524%" y="85" width="0.0409%" height="15" fill="rgb(242,16,51)" fg:x="54511499354" fg:w="4035855584"/><text x="0.8024%" y="95.50"></text></g><g><title>cfree@GLIBC_2.2.5 (3,886,050,293 samples, 0.04%)</title><rect x="0.5539%" y="69" width="0.0394%" height="15" fill="rgb(248,9,4)" fg:x="54661304645" fg:w="3886050293"/><text x="0.8039%" y="79.50"></text></g><g><title>_int_free_merge_chunk (2,656,779,022 samples, 0.03%)</title><rect x="0.5663%" y="53" width="0.0269%" height="15" fill="rgb(210,31,22)" fg:x="55890575916" fg:w="2656779022"/><text x="0.8163%" y="63.50"></text></g><g><title>unlink_chunk.isra.0 (1,593,457,429 samples, 0.02%)</title><rect x="0.5771%" y="37" width="0.0161%" height="15" fill="rgb(239,54,39)" fg:x="56953897509" fg:w="1593457429"/><text x="0.8271%" y="47.50"></text></g><g><title>core::intrinsics::copy (1,190,770,407 samples, 0.01%)</title><rect x="0.6068%" y="277" width="0.0121%" height="15" fill="rgb(230,99,41)" fg:x="59883929136" fg:w="1190770407"/><text x="0.8568%" y="287.50"></text></g><g><title>core::slice::sort::unstable::quicksort::quicksort (2,512,810,625 samples, 0.03%)</title><rect x="0.6018%" y="341" width="0.0255%" height="15" fill="rgb(253,106,12)" fg:x="59388964956" fg:w="2512810625"/><text x="0.8518%" y="351.50"></text></g><g><title>core::slice::sort::unstable::quicksort::partition (2,331,062,932 samples, 0.02%)</title><rect x="0.6036%" y="325" width="0.0236%" height="15" fill="rgb(213,46,41)" fg:x="59570712649" fg:w="2331062932"/><text x="0.8536%" y="335.50"></text></g><g><title>core::slice::sort::unstable::quicksort::partition_lomuto_branchless_cyclic (2,064,616,464 samples, 0.02%)</title><rect x="0.6063%" y="309" width="0.0209%" height="15" fill="rgb(215,133,35)" fg:x="59837159117" fg:w="2064616464"/><text x="0.8563%" y="319.50"></text></g><g><title>core::slice::sort::unstable::quicksort::partition_lomuto_branchless_cyclic::_{{closure}} (2,064,616,464 samples, 0.02%)</title><rect x="0.6063%" y="293" width="0.0209%" height="15" fill="rgb(213,28,5)" fg:x="59837159117" fg:w="2064616464"/><text x="0.8563%" y="303.50"></text></g><g><title>cargo_tarpaulin::process_handling::collect_coverage (16,321,985,030 samples, 0.17%)</title><rect x="0.4623%" y="405" width="0.1654%" height="15" fill="rgb(215,77,49)" fg:x="45627297780" fg:w="16321985030"/><text x="0.7123%" y="415.50"></text></g><g><title>cargo_tarpaulin::statemachine::TestState::step (16,321,985,030 samples, 0.17%)</title><rect x="0.4623%" y="389" width="0.1654%" height="15" fill="rgb(248,100,22)" fg:x="45627297780" fg:w="16321985030"/><text x="0.7123%" y="399.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;dyn cargo_tarpaulin::statemachine::StateData&gt; as cargo_tarpaulin::statemachine::StateData&gt;::wait (16,321,985,030 samples, 0.17%)</title><rect x="0.4623%" y="373" width="0.1654%" height="15" fill="rgb(208,67,9)" fg:x="45627297780" fg:w="16321985030"/><text x="0.7123%" y="383.50"></text></g><g><title>&lt;cargo_tarpaulin::statemachine::instrumented::LlvmInstrumentedData as cargo_tarpaulin::statemachine::StateData&gt;::wait (16,321,985,030 samples, 0.17%)</title><rect x="0.4623%" y="357" width="0.1654%" height="15" fill="rgb(219,133,21)" fg:x="45627297780" fg:w="16321985030"/><text x="0.7123%" y="367.50"></text></g><g><title>cargo_tarpaulin::process_handling::get_test_coverage (16,367,892,878 samples, 0.17%)</title><rect x="0.4623%" y="421" width="0.1659%" height="15" fill="rgb(246,46,29)" fg:x="45627297780" fg:w="16367892878"/><text x="0.7123%" y="431.50"></text></g><g><title>&lt;core::slice::iter::IterMut&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::find (1,168,400,260 samples, 0.01%)</title><rect x="0.6367%" y="405" width="0.0118%" height="15" fill="rgb(246,185,52)" fg:x="62833375042" fg:w="1168400260"/><text x="0.8867%" y="415.50"></text></g><g><title>cargo_tarpaulin::traces::TraceMap::merge (1,763,340,546 samples, 0.02%)</title><rect x="0.6362%" y="421" width="0.0179%" height="15" fill="rgb(252,136,11)" fg:x="62783303618" fg:w="1763340546"/><text x="0.8862%" y="431.50"></text></g><g><title>cargo_tarpaulin::launch_tarpaulin (19,126,898,096 samples, 0.19%)</title><rect x="0.4620%" y="437" width="0.1938%" height="15" fill="rgb(219,138,53)" fg:x="45595464963" fg:w="19126898096"/><text x="0.7120%" y="447.50"></text></g><g><title>cargo_tarpaulin::collect_tracemap (19,224,247,610 samples, 0.19%)</title><rect x="0.4620%" y="469" width="0.1948%" height="15" fill="rgb(211,51,23)" fg:x="45595464963" fg:w="19224247610"/><text x="0.7120%" y="479.50"></text></g><g><title>cargo_tarpaulin::trace (19,224,247,610 samples, 0.19%)</title><rect x="0.4620%" y="453" width="0.1948%" height="15" fill="rgb(247,221,28)" fg:x="45595464963" fg:w="19224247610"/><text x="0.7120%" y="463.50"></text></g><g><title>&lt;std::path::Components as core::iter::traits::iterator::Iterator&gt;::next (2,633,460,222 samples, 0.03%)</title><rect x="0.6668%" y="133" width="0.0267%" height="15" fill="rgb(251,222,45)" fg:x="65807146561" fg:w="2633460222"/><text x="0.9168%" y="143.50"></text></g><g><title>cargo_tarpaulin::traces::TraceMap::coverable_in_path (5,323,445,463 samples, 0.05%)</title><rect x="0.6576%" y="389" width="0.0539%" height="15" fill="rgb(217,162,53)" fg:x="64892600951" fg:w="5323445463"/><text x="0.9076%" y="399.50"></text></g><g><title>cargo_tarpaulin::traces::amount_coverable (5,323,445,463 samples, 0.05%)</title><rect x="0.6576%" y="373" width="0.0539%" height="15" fill="rgb(229,93,14)" fg:x="64892600951" fg:w="5323445463"/><text x="0.9076%" y="383.50"></text></g><g><title>&lt;core::iter::adapters::flatten::FlatMap&lt;I,U,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (5,323,445,463 samples, 0.05%)</title><rect x="0.6576%" y="357" width="0.0539%" height="15" fill="rgb(209,67,49)" fg:x="64892600951" fg:w="5323445463"/><text x="0.9076%" y="367.50"></text></g><g><title>&lt;core::iter::adapters::flatten::FlattenCompat&lt;I,U&gt; as core::iter::traits::iterator::Iterator&gt;::next (5,323,445,463 samples, 0.05%)</title><rect x="0.6576%" y="341" width="0.0539%" height="15" fill="rgb(213,87,29)" fg:x="64892600951" fg:w="5323445463"/><text x="0.9076%" y="351.50"></text></g><g><title>&lt;core::iter::adapters::fuse::Fuse&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (5,323,445,463 samples, 0.05%)</title><rect x="0.6576%" y="325" width="0.0539%" height="15" fill="rgb(205,151,52)" fg:x="64892600951" fg:w="5323445463"/><text x="0.9076%" y="335.50"></text></g><g><title>&lt;core::iter::adapters::fuse::Fuse&lt;I&gt; as core::iter::adapters::fuse::FuseImpl&lt;I&gt;&gt;::next (5,323,445,463 samples, 0.05%)</title><rect x="0.6576%" y="309" width="0.0539%" height="15" fill="rgb(253,215,39)" fg:x="64892600951" fg:w="5323445463"/><text x="0.9076%" y="319.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (5,323,445,463 samples, 0.05%)</title><rect x="0.6576%" y="293" width="0.0539%" height="15" fill="rgb(221,220,41)" fg:x="64892600951" fg:w="5323445463"/><text x="0.9076%" y="303.50"></text></g><g><title>&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::next (5,323,445,463 samples, 0.05%)</title><rect x="0.6576%" y="277" width="0.0539%" height="15" fill="rgb(218,133,21)" fg:x="64892600951" fg:w="5323445463"/><text x="0.9076%" y="287.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find (5,323,445,463 samples, 0.05%)</title><rect x="0.6576%" y="261" width="0.0539%" height="15" fill="rgb(221,193,43)" fg:x="64892600951" fg:w="5323445463"/><text x="0.9076%" y="271.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (5,323,445,463 samples, 0.05%)</title><rect x="0.6576%" y="245" width="0.0539%" height="15" fill="rgb(240,128,52)" fg:x="64892600951" fg:w="5323445463"/><text x="0.9076%" y="255.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find::check::_{{closure}} (5,323,445,463 samples, 0.05%)</title><rect x="0.6576%" y="229" width="0.0539%" height="15" fill="rgb(253,114,12)" fg:x="64892600951" fg:w="5323445463"/><text x="0.9076%" y="239.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (5,323,445,463 samples, 0.05%)</title><rect x="0.6576%" y="213" width="0.0539%" height="15" fill="rgb(215,223,47)" fg:x="64892600951" fg:w="5323445463"/><text x="0.9076%" y="223.50"></text></g><g><title>cargo_tarpaulin::traces::TraceMap::get_child_traces::_{{closure}} (5,323,445,463 samples, 0.05%)</title><rect x="0.6576%" y="197" width="0.0539%" height="15" fill="rgb(248,225,23)" fg:x="64892600951" fg:w="5323445463"/><text x="0.9076%" y="207.50"></text></g><g><title>std::path::Path::starts_with (5,323,445,463 samples, 0.05%)</title><rect x="0.6576%" y="181" width="0.0539%" height="15" fill="rgb(250,108,0)" fg:x="64892600951" fg:w="5323445463"/><text x="0.9076%" y="191.50"></text></g><g><title>std::path::Path::_starts_with (5,323,445,463 samples, 0.05%)</title><rect x="0.6576%" y="165" width="0.0539%" height="15" fill="rgb(228,208,7)" fg:x="64892600951" fg:w="5323445463"/><text x="0.9076%" y="175.50"></text></g><g><title>std::path::iter_after (5,323,445,463 samples, 0.05%)</title><rect x="0.6576%" y="149" width="0.0539%" height="15" fill="rgb(244,45,10)" fg:x="64892600951" fg:w="5323445463"/><text x="0.9076%" y="159.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (1,775,439,631 samples, 0.02%)</title><rect x="0.6935%" y="133" width="0.0180%" height="15" fill="rgb(207,125,25)" fg:x="68440606783" fg:w="1775439631"/><text x="0.9435%" y="143.50"></text></g><g><title>&lt;std::path::Component as core::cmp::PartialEq&gt;::eq (1,775,439,631 samples, 0.02%)</title><rect x="0.6935%" y="117" width="0.0180%" height="15" fill="rgb(210,195,18)" fg:x="68440606783" fg:w="1775439631"/><text x="0.9435%" y="127.50"></text></g><g><title>&lt;std::path::Components as core::iter::traits::iterator::Iterator&gt;::next (1,463,449,429 samples, 0.01%)</title><rect x="0.7171%" y="133" width="0.0148%" height="15" fill="rgb(249,80,12)" fg:x="70765104605" fg:w="1463449429"/><text x="0.9671%" y="143.50"></text></g><g><title>cargo_tarpaulin::report::generate_requested_reports (7,999,866,966 samples, 0.08%)</title><rect x="0.6568%" y="421" width="0.0811%" height="15" fill="rgb(221,65,9)" fg:x="64822848400" fg:w="7999866966"/><text x="0.9068%" y="431.50"></text></g><g><title>cargo_tarpaulin::report::print_summary (7,930,114,415 samples, 0.08%)</title><rect x="0.6576%" y="405" width="0.0804%" height="15" fill="rgb(235,49,36)" fg:x="64892600951" fg:w="7930114415"/><text x="0.9076%" y="415.50"></text></g><g><title>cargo_tarpaulin::traces::TraceMap::covered_in_path (2,561,057,896 samples, 0.03%)</title><rect x="0.7120%" y="389" width="0.0260%" height="15" fill="rgb(225,32,20)" fg:x="70261657470" fg:w="2561057896"/><text x="0.9620%" y="399.50"></text></g><g><title>cargo_tarpaulin::traces::amount_covered (2,561,057,896 samples, 0.03%)</title><rect x="0.7120%" y="373" width="0.0260%" height="15" fill="rgb(215,141,46)" fg:x="70261657470" fg:w="2561057896"/><text x="0.9620%" y="383.50"></text></g><g><title>&lt;core::iter::adapters::flatten::FlatMap&lt;I,U,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (2,561,057,896 samples, 0.03%)</title><rect x="0.7120%" y="357" width="0.0260%" height="15" fill="rgb(250,160,47)" fg:x="70261657470" fg:w="2561057896"/><text x="0.9620%" y="367.50"></text></g><g><title>&lt;core::iter::adapters::flatten::FlattenCompat&lt;I,U&gt; as core::iter::traits::iterator::Iterator&gt;::next (2,561,057,896 samples, 0.03%)</title><rect x="0.7120%" y="341" width="0.0260%" height="15" fill="rgb(216,222,40)" fg:x="70261657470" fg:w="2561057896"/><text x="0.9620%" y="351.50"></text></g><g><title>&lt;core::iter::adapters::fuse::Fuse&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (2,561,057,896 samples, 0.03%)</title><rect x="0.7120%" y="325" width="0.0260%" height="15" fill="rgb(234,217,39)" fg:x="70261657470" fg:w="2561057896"/><text x="0.9620%" y="335.50"></text></g><g><title>&lt;core::iter::adapters::fuse::Fuse&lt;I&gt; as core::iter::adapters::fuse::FuseImpl&lt;I&gt;&gt;::next (2,561,057,896 samples, 0.03%)</title><rect x="0.7120%" y="309" width="0.0260%" height="15" fill="rgb(207,178,40)" fg:x="70261657470" fg:w="2561057896"/><text x="0.9620%" y="319.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (2,561,057,896 samples, 0.03%)</title><rect x="0.7120%" y="293" width="0.0260%" height="15" fill="rgb(221,136,13)" fg:x="70261657470" fg:w="2561057896"/><text x="0.9620%" y="303.50"></text></g><g><title>&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::next (2,561,057,896 samples, 0.03%)</title><rect x="0.7120%" y="277" width="0.0260%" height="15" fill="rgb(249,199,10)" fg:x="70261657470" fg:w="2561057896"/><text x="0.9620%" y="287.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find (2,561,057,896 samples, 0.03%)</title><rect x="0.7120%" y="261" width="0.0260%" height="15" fill="rgb(249,222,13)" fg:x="70261657470" fg:w="2561057896"/><text x="0.9620%" y="271.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (2,561,057,896 samples, 0.03%)</title><rect x="0.7120%" y="245" width="0.0260%" height="15" fill="rgb(244,185,38)" fg:x="70261657470" fg:w="2561057896"/><text x="0.9620%" y="255.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find::check::_{{closure}} (2,561,057,896 samples, 0.03%)</title><rect x="0.7120%" y="229" width="0.0260%" height="15" fill="rgb(236,202,9)" fg:x="70261657470" fg:w="2561057896"/><text x="0.9620%" y="239.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (2,561,057,896 samples, 0.03%)</title><rect x="0.7120%" y="213" width="0.0260%" height="15" fill="rgb(250,229,37)" fg:x="70261657470" fg:w="2561057896"/><text x="0.9620%" y="223.50"></text></g><g><title>cargo_tarpaulin::traces::TraceMap::get_child_traces::_{{closure}} (2,561,057,896 samples, 0.03%)</title><rect x="0.7120%" y="197" width="0.0260%" height="15" fill="rgb(206,174,23)" fg:x="70261657470" fg:w="2561057896"/><text x="0.9620%" y="207.50"></text></g><g><title>std::path::Path::starts_with (2,561,057,896 samples, 0.03%)</title><rect x="0.7120%" y="181" width="0.0260%" height="15" fill="rgb(211,33,43)" fg:x="70261657470" fg:w="2561057896"/><text x="0.9620%" y="191.50"></text></g><g><title>std::path::Path::_starts_with (2,561,057,896 samples, 0.03%)</title><rect x="0.7120%" y="165" width="0.0260%" height="15" fill="rgb(245,58,50)" fg:x="70261657470" fg:w="2561057896"/><text x="0.9620%" y="175.50"></text></g><g><title>std::path::iter_after (2,561,057,896 samples, 0.03%)</title><rect x="0.7120%" y="149" width="0.0260%" height="15" fill="rgb(244,68,36)" fg:x="70261657470" fg:w="2561057896"/><text x="0.9620%" y="159.50"></text></g><g><title>cargo_tarpaulin::report_coverage_with_check (8,819,013,138 samples, 0.09%)</title><rect x="0.6568%" y="453" width="0.0894%" height="15" fill="rgb(232,229,15)" fg:x="64819712573" fg:w="8819013138"/><text x="0.9068%" y="463.50"></text></g><g><title>cargo_tarpaulin::report::report_coverage (8,815,877,311 samples, 0.09%)</title><rect x="0.6568%" y="437" width="0.0893%" height="15" fill="rgb(254,30,23)" fg:x="64822848400" fg:w="8815877311"/><text x="0.9068%" y="447.50"></text></g><g><title>cargo_tarpaulin::report_tracemap (8,826,047,560 samples, 0.09%)</title><rect x="0.6568%" y="469" width="0.0894%" height="15" fill="rgb(235,160,14)" fg:x="64819712573" fg:w="8826047560"/><text x="0.9068%" y="479.50"></text></g><g><title>_start (28,050,295,331 samples, 0.28%)</title><rect x="0.4620%" y="757" width="0.2842%" height="15" fill="rgb(212,155,44)" fg:x="45595464963" fg:w="28050295331"/><text x="0.7120%" y="767.50"></text></g><g><title>__libc_start_main@@GLIBC_2.34 (28,050,295,331 samples, 0.28%)</title><rect x="0.4620%" y="741" width="0.2842%" height="15" fill="rgb(226,2,50)" fg:x="45595464963" fg:w="28050295331"/><text x="0.7120%" y="751.50"></text></g><g><title>__libc_start_call_main (28,050,295,331 samples, 0.28%)</title><rect x="0.4620%" y="725" width="0.2842%" height="15" fill="rgb(234,177,6)" fg:x="45595464963" fg:w="28050295331"/><text x="0.7120%" y="735.50"></text></g><g><title>main (28,050,295,331 samples, 0.28%)</title><rect x="0.4620%" y="709" width="0.2842%" height="15" fill="rgb(217,24,9)" fg:x="45595464963" fg:w="28050295331"/><text x="0.7120%" y="719.50"></text></g><g><title>std::rt::lang_start_internal (28,050,295,331 samples, 0.28%)</title><rect x="0.4620%" y="693" width="0.2842%" height="15" fill="rgb(220,13,46)" fg:x="45595464963" fg:w="28050295331"/><text x="0.7120%" y="703.50"></text></g><g><title>std::panic::catch_unwind (28,050,295,331 samples, 0.28%)</title><rect x="0.4620%" y="677" width="0.2842%" height="15" fill="rgb(239,221,27)" fg:x="45595464963" fg:w="28050295331"/><text x="0.7120%" y="687.50"></text></g><g><title>std::panicking::try (28,050,295,331 samples, 0.28%)</title><rect x="0.4620%" y="661" width="0.2842%" height="15" fill="rgb(222,198,25)" fg:x="45595464963" fg:w="28050295331"/><text x="0.7120%" y="671.50"></text></g><g><title>std::panicking::try::do_call (28,050,295,331 samples, 0.28%)</title><rect x="0.4620%" y="645" width="0.2842%" height="15" fill="rgb(211,99,13)" fg:x="45595464963" fg:w="28050295331"/><text x="0.7120%" y="655.50"></text></g><g><title>std::rt::lang_start_internal::_{{closure}} (28,050,295,331 samples, 0.28%)</title><rect x="0.4620%" y="629" width="0.2842%" height="15" fill="rgb(232,111,31)" fg:x="45595464963" fg:w="28050295331"/><text x="0.7120%" y="639.50"></text></g><g><title>std::panic::catch_unwind (28,050,295,331 samples, 0.28%)</title><rect x="0.4620%" y="613" width="0.2842%" height="15" fill="rgb(245,82,37)" fg:x="45595464963" fg:w="28050295331"/><text x="0.7120%" y="623.50"></text></g><g><title>std::panicking::try (28,050,295,331 samples, 0.28%)</title><rect x="0.4620%" y="597" width="0.2842%" height="15" fill="rgb(227,149,46)" fg:x="45595464963" fg:w="28050295331"/><text x="0.7120%" y="607.50"></text></g><g><title>std::panicking::try::do_call (28,050,295,331 samples, 0.28%)</title><rect x="0.4620%" y="581" width="0.2842%" height="15" fill="rgb(218,36,50)" fg:x="45595464963" fg:w="28050295331"/><text x="0.7120%" y="591.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (28,050,295,331 samples, 0.28%)</title><rect x="0.4620%" y="565" width="0.2842%" height="15" fill="rgb(226,80,48)" fg:x="45595464963" fg:w="28050295331"/><text x="0.7120%" y="575.50"></text></g><g><title>_ZN3std2rt10lang_start28_$u7b$$u7b$closure$u7d$$u7d$17hcb362ac0c2fab2b3E.llvm.16397163363871860421 (28,050,295,331 samples, 0.28%)</title><rect x="0.4620%" y="549" width="0.2842%" height="15" fill="rgb(238,224,15)" fg:x="45595464963" fg:w="28050295331"/><text x="0.7120%" y="559.50"></text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (28,050,295,331 samples, 0.28%)</title><rect x="0.4620%" y="533" width="0.2842%" height="15" fill="rgb(241,136,10)" fg:x="45595464963" fg:w="28050295331"/><text x="0.7120%" y="543.50"></text></g><g><title>core::ops::function::FnOnce::call_once (28,050,295,331 samples, 0.28%)</title><rect x="0.4620%" y="517" width="0.2842%" height="15" fill="rgb(208,32,45)" fg:x="45595464963" fg:w="28050295331"/><text x="0.7120%" y="527.50"></text></g><g><title>cargo_tarpaulin::main (28,050,295,331 samples, 0.28%)</title><rect x="0.4620%" y="501" width="0.2842%" height="15" fill="rgb(207,135,9)" fg:x="45595464963" fg:w="28050295331"/><text x="0.7120%" y="511.50"></text></g><g><title>cargo_tarpaulin::run (28,050,295,331 samples, 0.28%)</title><rect x="0.4620%" y="485" width="0.2842%" height="15" fill="rgb(206,86,44)" fg:x="45595464963" fg:w="28050295331"/><text x="0.7120%" y="495.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::position (2,530,415,533 samples, 0.03%)</title><rect x="1.0339%" y="453" width="0.0256%" height="15" fill="rgb(245,177,15)" fg:x="102035815430" fg:w="2530415533"/><text x="1.2839%" y="463.50"></text></g><g><title>&lt;std::path::Components as core::iter::traits::iterator::Iterator&gt;::next (22,052,314,929 samples, 0.22%)</title><rect x="0.8395%" y="485" width="0.2235%" height="15" fill="rgb(206,64,50)" fg:x="82846593952" fg:w="22052314929"/><text x="1.0895%" y="495.50"></text></g><g><title>std::path::Components::parse_next_component (2,863,093,451 samples, 0.03%)</title><rect x="1.0339%" y="469" width="0.0290%" height="15" fill="rgb(234,36,40)" fg:x="102035815430" fg:w="2863093451"/><text x="1.2839%" y="479.50"></text></g><g><title>&lt;cargo_tarpaulin::statemachine::instrumented::LlvmInstrumentedData as cargo_tarpaulin::statemachine::StateData&gt;::wait::_{{closure}} (41,279,858,017 samples, 0.42%)</title><rect x="0.7557%" y="581" width="0.4183%" height="15" fill="rgb(213,64,8)" fg:x="74573934688" fg:w="41279858017"/><text x="1.0057%" y="591.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::any (41,279,858,017 samples, 0.42%)</title><rect x="0.7557%" y="565" width="0.4183%" height="15" fill="rgb(210,75,36)" fg:x="74573934688" fg:w="41279858017"/><text x="1.0057%" y="575.50"></text></g><g><title>&lt;cargo_tarpaulin::statemachine::instrumented::LlvmInstrumentedData as cargo_tarpaulin::statemachine::StateData&gt;::wait::_{{closure}}::_{{closure}} (41,279,858,017 samples, 0.42%)</title><rect x="0.7557%" y="549" width="0.4183%" height="15" fill="rgb(229,88,21)" fg:x="74573934688" fg:w="41279858017"/><text x="1.0057%" y="559.50"></text></g><g><title>std::path::Path::starts_with (41,279,858,017 samples, 0.42%)</title><rect x="0.7557%" y="533" width="0.4183%" height="15" fill="rgb(252,204,47)" fg:x="74573934688" fg:w="41279858017"/><text x="1.0057%" y="543.50"></text></g><g><title>std::path::Path::_starts_with (41,279,858,017 samples, 0.42%)</title><rect x="0.7557%" y="517" width="0.4183%" height="15" fill="rgb(208,77,27)" fg:x="74573934688" fg:w="41279858017"/><text x="1.0057%" y="527.50"></text></g><g><title>std::path::iter_after (40,859,129,814 samples, 0.41%)</title><rect x="0.7599%" y="501" width="0.4140%" height="15" fill="rgb(221,76,26)" fg:x="74994662891" fg:w="40859129814"/><text x="1.0099%" y="511.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (10,954,883,824 samples, 0.11%)</title><rect x="1.0629%" y="485" width="0.1110%" height="15" fill="rgb(225,139,18)" fg:x="104898908881" fg:w="10954883824"/><text x="1.3129%" y="495.50"></text></g><g><title>&lt;std::path::Component as core::cmp::PartialEq&gt;::eq (10,954,883,824 samples, 0.11%)</title><rect x="1.0629%" y="469" width="0.1110%" height="15" fill="rgb(230,137,11)" fg:x="104898908881" fg:w="10954883824"/><text x="1.3129%" y="479.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::rposition (2,840,011,437 samples, 0.03%)</title><rect x="1.3224%" y="485" width="0.0288%" height="15" fill="rgb(212,28,1)" fg:x="130507315784" fg:w="2840011437"/><text x="1.5724%" y="495.50"></text></g><g><title>std::path::compare_components::_{{closure}} (1,320,554,994 samples, 0.01%)</title><rect x="1.3378%" y="469" width="0.0134%" height="15" fill="rgb(248,164,17)" fg:x="132026772227" fg:w="1320554994"/><text x="1.5878%" y="479.50"></text></g><g><title>std::path::Components::is_sep_byte (1,320,554,994 samples, 0.01%)</title><rect x="1.3378%" y="453" width="0.0134%" height="15" fill="rgb(222,171,42)" fg:x="132026772227" fg:w="1320554994"/><text x="1.5878%" y="463.50"></text></g><g><title>std::path::Components::finished (6,006,216,722 samples, 0.06%)</title><rect x="1.4638%" y="389" width="0.0609%" height="15" fill="rgb(243,84,45)" fg:x="144456639337" fg:w="6006216722"/><text x="1.7138%" y="399.50"></text></g><g><title>&lt;std::path::State as core::cmp::PartialEq&gt;::eq (3,953,600,248 samples, 0.04%)</title><rect x="1.4846%" y="373" width="0.0401%" height="15" fill="rgb(252,49,23)" fg:x="146509255811" fg:w="3953600248"/><text x="1.7346%" y="383.50"></text></g><g><title>&lt;std::path::Components as core::iter::traits::iterator::Iterator&gt;::next (17,622,038,712 samples, 0.18%)</title><rect x="1.3512%" y="405" width="0.1786%" height="15" fill="rgb(215,19,7)" fg:x="133347327221" fg:w="17622038712"/><text x="1.6012%" y="415.50"></text></g><g><title>&lt;std::path::Components as core::iter::traits::iterator::Iterator&gt;::next (1,791,666,558 samples, 0.02%)</title><rect x="1.5322%" y="373" width="0.0182%" height="15" fill="rgb(238,81,41)" fg:x="151206693523" fg:w="1791666558"/><text x="1.7822%" y="383.50"></text></g><g><title>__memcmp_evex_movbe (2,878,382,917 samples, 0.03%)</title><rect x="1.5642%" y="325" width="0.0292%" height="15" fill="rgb(210,199,37)" fg:x="154364698504" fg:w="2878382917"/><text x="1.8142%" y="335.50"></text></g><g><title>core::iter::traits::iterator::Iterator::cmp (24,180,821,913 samples, 0.25%)</title><rect x="1.3512%" y="485" width="0.2450%" height="15" fill="rgb(244,192,49)" fg:x="133347327221" fg:w="24180821913"/><text x="1.6012%" y="495.50"></text></g><g><title>core::iter::traits::iterator::Iterator::cmp_by (24,180,821,913 samples, 0.25%)</title><rect x="1.3512%" y="469" width="0.2450%" height="15" fill="rgb(226,211,11)" fg:x="133347327221" fg:w="24180821913"/><text x="1.6012%" y="479.50"></text></g><g><title>core::iter::traits::iterator::iter_compare (24,180,821,913 samples, 0.25%)</title><rect x="1.3512%" y="453" width="0.2450%" height="15" fill="rgb(236,162,54)" fg:x="133347327221" fg:w="24180821913"/><text x="1.6012%" y="463.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_for_each (24,180,821,913 samples, 0.25%)</title><rect x="1.3512%" y="437" width="0.2450%" height="15" fill="rgb(220,229,9)" fg:x="133347327221" fg:w="24180821913"/><text x="1.6012%" y="447.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (24,180,821,913 samples, 0.25%)</title><rect x="1.3512%" y="421" width="0.2450%" height="15" fill="rgb(250,87,22)" fg:x="133347327221" fg:w="24180821913"/><text x="1.6012%" y="431.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_for_each::call::_{{closure}} (6,558,783,201 samples, 0.07%)</title><rect x="1.5298%" y="405" width="0.0665%" height="15" fill="rgb(239,43,17)" fg:x="150969365933" fg:w="6558783201"/><text x="1.7798%" y="415.50"></text></g><g><title>core::iter::traits::iterator::iter_compare::compare::_{{closure}} (6,558,783,201 samples, 0.07%)</title><rect x="1.5298%" y="389" width="0.0665%" height="15" fill="rgb(231,177,25)" fg:x="150969365933" fg:w="6558783201"/><text x="1.7798%" y="399.50"></text></g><g><title>core::iter::traits::iterator::Iterator::cmp_by::compare::_{{closure}} (4,529,789,053 samples, 0.05%)</title><rect x="1.5503%" y="373" width="0.0459%" height="15" fill="rgb(219,179,1)" fg:x="152998360081" fg:w="4529789053"/><text x="1.8003%" y="383.50"></text></g><g><title>core::iter::traits::iterator::Iterator::cmp::_{{closure}} (4,387,158,192 samples, 0.04%)</title><rect x="1.5518%" y="357" width="0.0445%" height="15" fill="rgb(238,219,53)" fg:x="153140990942" fg:w="4387158192"/><text x="1.8018%" y="367.50"></text></g><g><title>&lt;std::path::Component as core::cmp::Ord&gt;::cmp (4,387,158,192 samples, 0.04%)</title><rect x="1.5518%" y="341" width="0.0445%" height="15" fill="rgb(232,167,36)" fg:x="153140990942" fg:w="4387158192"/><text x="1.8018%" y="351.50"></text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::next (2,075,722,590 samples, 0.02%)</title><rect x="1.5962%" y="453" width="0.0210%" height="15" fill="rgb(244,19,51)" fg:x="157528149134" fg:w="2075722590"/><text x="1.8462%" y="463.50"></text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::adapters::zip::ZipImpl&lt;A,B&gt;&gt;::next (2,075,722,590 samples, 0.02%)</title><rect x="1.5962%" y="437" width="0.0210%" height="15" fill="rgb(224,6,22)" fg:x="157528149134" fg:w="2075722590"/><text x="1.8462%" y="447.50"></text></g><g><title>core::iter::traits::iterator::Iterator::position (26,025,742,114 samples, 0.26%)</title><rect x="1.5962%" y="485" width="0.2637%" height="15" fill="rgb(224,145,5)" fg:x="157528149134" fg:w="26025742114"/><text x="1.8462%" y="495.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (26,025,742,114 samples, 0.26%)</title><rect x="1.5962%" y="469" width="0.2637%" height="15" fill="rgb(234,130,49)" fg:x="157528149134" fg:w="26025742114"/><text x="1.8462%" y="479.50"></text></g><g><title>core::iter::traits::iterator::Iterator::position::check::_{{closure}} (23,950,019,524 samples, 0.24%)</title><rect x="1.6173%" y="453" width="0.2427%" height="15" fill="rgb(254,6,2)" fg:x="159603871724" fg:w="23950019524"/><text x="1.8673%" y="463.50"></text></g><g><title>std::path::compare_components::_{{closure}} (8,226,558,413 samples, 0.08%)</title><rect x="1.7766%" y="437" width="0.0834%" height="15" fill="rgb(208,96,46)" fg:x="175327332835" fg:w="8226558413"/><text x="2.0266%" y="447.50"></text></g><g><title>&lt;core::ops::range::RangeFrom&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (1,128,178,065 samples, 0.01%)</title><rect x="1.8614%" y="469" width="0.0114%" height="15" fill="rgb(239,3,39)" fg:x="183696790758" fg:w="1128178065"/><text x="2.1114%" y="479.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::entry (69,951,372,860 samples, 0.71%)</title><rect x="1.1739%" y="581" width="0.7088%" height="15" fill="rgb(233,210,1)" fg:x="115853792705" fg:w="69951372860"/><text x="1.4239%" y="591.50"></text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::search_tree (69,951,372,860 samples, 0.71%)</title><rect x="1.1739%" y="565" width="0.7088%" height="15" fill="rgb(244,137,37)" fg:x="115853792705" fg:w="69951372860"/><text x="1.4239%" y="575.50"></text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;&gt;::search_node (69,951,372,860 samples, 0.71%)</title><rect x="1.1739%" y="549" width="0.7088%" height="15" fill="rgb(240,136,2)" fg:x="115853792705" fg:w="69951372860"/><text x="1.4239%" y="559.50"></text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;&gt;::find_key_index (69,951,372,860 samples, 0.71%)</title><rect x="1.1739%" y="533" width="0.7088%" height="15" fill="rgb(239,18,37)" fg:x="115853792705" fg:w="69951372860"/><text x="1.4239%" y="543.50"></text></g><g><title>&lt;std::path::PathBuf as core::cmp::Ord&gt;::cmp (69,951,372,860 samples, 0.71%)</title><rect x="1.1739%" y="517" width="0.7088%" height="15" fill="rgb(218,185,22)" fg:x="115853792705" fg:w="69951372860"/><text x="1.4239%" y="527.50"></text></g><g><title>std::path::compare_components (69,951,372,860 samples, 0.71%)</title><rect x="1.1739%" y="501" width="0.7088%" height="15" fill="rgb(225,218,4)" fg:x="115853792705" fg:w="69951372860"/><text x="1.4239%" y="511.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (2,108,374,807 samples, 0.02%)</title><rect x="1.8614%" y="485" width="0.0214%" height="15" fill="rgb(230,182,32)" fg:x="183696790758" fg:w="2108374807"/><text x="2.1114%" y="495.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (12,627,844,155 samples, 0.13%)</title><rect x="1.8837%" y="565" width="0.1280%" height="15" fill="rgb(242,56,43)" fg:x="185899869381" fg:w="12627844155"/><text x="2.1337%" y="575.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (12,627,844,155 samples, 0.13%)</title><rect x="1.8837%" y="549" width="0.1280%" height="15" fill="rgb(233,99,24)" fg:x="185899869381" fg:w="12627844155"/><text x="2.1337%" y="559.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_one (12,627,844,155 samples, 0.13%)</title><rect x="1.8837%" y="533" width="0.1280%" height="15" fill="rgb(234,209,42)" fg:x="185899869381" fg:w="12627844155"/><text x="2.1337%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_amortized (12,627,844,155 samples, 0.13%)</title><rect x="1.8837%" y="517" width="0.1280%" height="15" fill="rgb(227,7,12)" fg:x="185899869381" fg:w="12627844155"/><text x="2.1337%" y="527.50"></text></g><g><title>_ZN5alloc7raw_vec11finish_grow17hb963f69f0013fb2eE.llvm.7757775119285224340 (12,627,844,155 samples, 0.13%)</title><rect x="1.8837%" y="501" width="0.1280%" height="15" fill="rgb(245,203,43)" fg:x="185899869381" fg:w="12627844155"/><text x="2.1337%" y="511.50"></text></g><g><title>realloc (12,627,844,155 samples, 0.13%)</title><rect x="1.8837%" y="485" width="0.1280%" height="15" fill="rgb(238,205,33)" fg:x="185899869381" fg:w="12627844155"/><text x="2.1337%" y="495.50"></text></g><g><title>_int_realloc (12,627,844,155 samples, 0.13%)</title><rect x="1.8837%" y="469" width="0.1280%" height="15" fill="rgb(231,56,7)" fg:x="185899869381" fg:w="12627844155"/><text x="2.1337%" y="479.50"></text></g><g><title>_int_malloc (10,495,175,665 samples, 0.11%)</title><rect x="1.9053%" y="453" width="0.1063%" height="15" fill="rgb(244,186,29)" fg:x="188032537871" fg:w="10495175665"/><text x="2.1553%" y="463.50"></text></g><g><title>_int_free (1,088,512,919 samples, 0.01%)</title><rect x="2.0385%" y="245" width="0.0110%" height="15" fill="rgb(234,111,31)" fg:x="201171771853" fg:w="1088512919"/><text x="2.2885%" y="255.50"></text></g><g><title>llvm_profparser::coverage::CoverageMappingInfo::get_files_from_id (19,569,231,830 samples, 0.20%)</title><rect x="1.8837%" y="581" width="0.1983%" height="15" fill="rgb(241,149,10)" fg:x="185899869381" fg:w="19569231830"/><text x="2.1337%" y="591.50"></text></g><g><title>std::path::Path::join (6,941,387,675 samples, 0.07%)</title><rect x="2.0117%" y="565" width="0.0703%" height="15" fill="rgb(249,206,44)" fg:x="198527713536" fg:w="6941387675"/><text x="2.2617%" y="575.50"></text></g><g><title>std::path::Path::_join (6,941,387,675 samples, 0.07%)</title><rect x="2.0117%" y="549" width="0.0703%" height="15" fill="rgb(251,153,30)" fg:x="198527713536" fg:w="6941387675"/><text x="2.2617%" y="559.50"></text></g><g><title>std::path::PathBuf::push (6,941,387,675 samples, 0.07%)</title><rect x="2.0117%" y="533" width="0.0703%" height="15" fill="rgb(239,152,38)" fg:x="198527713536" fg:w="6941387675"/><text x="2.2617%" y="543.50"></text></g><g><title>std::path::PathBuf::_push (6,941,387,675 samples, 0.07%)</title><rect x="2.0117%" y="517" width="0.0703%" height="15" fill="rgb(249,139,47)" fg:x="198527713536" fg:w="6941387675"/><text x="2.2617%" y="527.50"></text></g><g><title>std::ffi::os_str::OsString::push (6,941,387,675 samples, 0.07%)</title><rect x="2.0117%" y="501" width="0.0703%" height="15" fill="rgb(244,64,35)" fg:x="198527713536" fg:w="6941387675"/><text x="2.2617%" y="511.50"></text></g><g><title>std::sys::os_str::bytes::Buf::push_slice (6,941,387,675 samples, 0.07%)</title><rect x="2.0117%" y="485" width="0.0703%" height="15" fill="rgb(216,46,15)" fg:x="198527713536" fg:w="6941387675"/><text x="2.2617%" y="495.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (6,941,387,675 samples, 0.07%)</title><rect x="2.0117%" y="469" width="0.0703%" height="15" fill="rgb(250,74,19)" fg:x="198527713536" fg:w="6941387675"/><text x="2.2617%" y="479.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (6,941,387,675 samples, 0.07%)</title><rect x="2.0117%" y="453" width="0.0703%" height="15" fill="rgb(249,42,33)" fg:x="198527713536" fg:w="6941387675"/><text x="2.2617%" y="463.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (6,941,387,675 samples, 0.07%)</title><rect x="2.0117%" y="437" width="0.0703%" height="15" fill="rgb(242,149,17)" fg:x="198527713536" fg:w="6941387675"/><text x="2.2617%" y="447.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (6,941,387,675 samples, 0.07%)</title><rect x="2.0117%" y="421" width="0.0703%" height="15" fill="rgb(244,29,21)" fg:x="198527713536" fg:w="6941387675"/><text x="2.2617%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (6,941,387,675 samples, 0.07%)</title><rect x="2.0117%" y="405" width="0.0703%" height="15" fill="rgb(220,130,37)" fg:x="198527713536" fg:w="6941387675"/><text x="2.2617%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve (6,941,387,675 samples, 0.07%)</title><rect x="2.0117%" y="389" width="0.0703%" height="15" fill="rgb(211,67,2)" fg:x="198527713536" fg:w="6941387675"/><text x="2.2617%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (6,941,387,675 samples, 0.07%)</title><rect x="2.0117%" y="373" width="0.0703%" height="15" fill="rgb(235,68,52)" fg:x="198527713536" fg:w="6941387675"/><text x="2.2617%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_amortized (6,941,387,675 samples, 0.07%)</title><rect x="2.0117%" y="357" width="0.0703%" height="15" fill="rgb(246,142,3)" fg:x="198527713536" fg:w="6941387675"/><text x="2.2617%" y="367.50"></text></g><g><title>alloc::raw_vec::finish_grow (6,941,387,675 samples, 0.07%)</title><rect x="2.0117%" y="341" width="0.0703%" height="15" fill="rgb(241,25,7)" fg:x="198527713536" fg:w="6941387675"/><text x="2.2617%" y="351.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (6,941,387,675 samples, 0.07%)</title><rect x="2.0117%" y="325" width="0.0703%" height="15" fill="rgb(242,119,39)" fg:x="198527713536" fg:w="6941387675"/><text x="2.2617%" y="335.50"></text></g><g><title>alloc::alloc::Global::grow_impl (6,941,387,675 samples, 0.07%)</title><rect x="2.0117%" y="309" width="0.0703%" height="15" fill="rgb(241,98,45)" fg:x="198527713536" fg:w="6941387675"/><text x="2.2617%" y="319.50"></text></g><g><title>alloc::alloc::realloc (6,941,387,675 samples, 0.07%)</title><rect x="2.0117%" y="293" width="0.0703%" height="15" fill="rgb(254,28,30)" fg:x="198527713536" fg:w="6941387675"/><text x="2.2617%" y="303.50"></text></g><g><title>realloc (6,802,611,597 samples, 0.07%)</title><rect x="2.0131%" y="277" width="0.0689%" height="15" fill="rgb(241,142,54)" fg:x="198666489614" fg:w="6802611597"/><text x="2.2631%" y="287.50"></text></g><g><title>_int_realloc (6,372,128,071 samples, 0.06%)</title><rect x="2.0174%" y="261" width="0.0646%" height="15" fill="rgb(222,85,15)" fg:x="199096973140" fg:w="6372128071"/><text x="2.2674%" y="271.50"></text></g><g><title>_int_malloc (3,113,996,430 samples, 0.03%)</title><rect x="2.0504%" y="245" width="0.0316%" height="15" fill="rgb(210,85,47)" fg:x="202355104781" fg:w="3113996430"/><text x="2.3004%" y="255.50"></text></g><g><title>llvm_profparser::coverage::coverage_mapping::CoverageMapping::generate_subreport (131,695,035,678 samples, 1.33%)</title><rect x="0.7557%" y="597" width="1.3345%" height="15" fill="rgb(224,206,25)" fg:x="74573934688" fg:w="131695035678"/><text x="1.0057%" y="607.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (1,407,692,131 samples, 0.01%)</title><rect x="2.0935%" y="517" width="0.0143%" height="15" fill="rgb(243,201,19)" fg:x="206604559840" fg:w="1407692131"/><text x="2.3435%" y="527.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (1,440,599,811 samples, 0.01%)</title><rect x="2.1165%" y="501" width="0.0146%" height="15" fill="rgb(236,59,4)" fg:x="208869967948" fg:w="1440599811"/><text x="2.3665%" y="511.50"></text></g><g><title>llvm_profparser::coverage::coverage_mapping::parse_mapping_regions (3,006,644,408 samples, 0.03%)</title><rect x="2.1133%" y="517" width="0.0305%" height="15" fill="rgb(254,179,45)" fg:x="208554807287" fg:w="3006644408"/><text x="2.3633%" y="527.50"></text></g><g><title>llvm_profparser::coverage::coverage_mapping::parse_coverage_functions (5,291,490,946 samples, 0.05%)</title><rect x="2.0906%" y="533" width="0.0536%" height="15" fill="rgb(226,14,10)" fg:x="206316037733" fg:w="5291490946"/><text x="2.3406%" y="543.50"></text></g><g><title>llvm_profparser::coverage::coverage_mapping::CoverageMapping::new (6,017,704,157 samples, 0.06%)</title><rect x="2.0901%" y="597" width="0.0610%" height="15" fill="rgb(244,27,41)" fg:x="206268970366" fg:w="6017704157"/><text x="2.3401%" y="607.50"></text></g><g><title>llvm_profparser::coverage::coverage_mapping::read_object_file (6,017,704,157 samples, 0.06%)</title><rect x="2.0901%" y="581" width="0.0610%" height="15" fill="rgb(235,35,32)" fg:x="206268970366" fg:w="6017704157"/><text x="2.3401%" y="591.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (5,970,636,790 samples, 0.06%)</title><rect x="2.0906%" y="565" width="0.0605%" height="15" fill="rgb(218,68,31)" fg:x="206316037733" fg:w="5970636790"/><text x="2.3406%" y="575.50"></text></g><g><title>llvm_profparser::coverage::coverage_mapping::read_object_file::_{{closure}} (5,970,636,790 samples, 0.06%)</title><rect x="2.0906%" y="549" width="0.0605%" height="15" fill="rgb(207,120,37)" fg:x="206316037733" fg:w="5970636790"/><text x="2.3406%" y="559.50"></text></g><g><title>&lt;T as alloc::string::ToString&gt;::to_string (1,259,769,661 samples, 0.01%)</title><rect x="2.1549%" y="533" width="0.0128%" height="15" fill="rgb(227,98,0)" fg:x="212660589449" fg:w="1259769661"/><text x="2.4049%" y="543.50"></text></g><g><title>&lt;str as alloc::string::SpecToString&gt;::spec_to_string (1,259,769,661 samples, 0.01%)</title><rect x="2.1549%" y="517" width="0.0128%" height="15" fill="rgb(207,7,3)" fg:x="212660589449" fg:w="1259769661"/><text x="2.4049%" y="527.50"></text></g><g><title>&lt;alloc::string::String as core::convert::From&lt;&amp;str&gt;&gt;::from (1,259,769,661 samples, 0.01%)</title><rect x="2.1549%" y="501" width="0.0128%" height="15" fill="rgb(206,98,19)" fg:x="212660589449" fg:w="1259769661"/><text x="2.4049%" y="511.50"></text></g><g><title>alloc::str::&lt;impl alloc::borrow::ToOwned for str&gt;::to_owned (1,259,769,661 samples, 0.01%)</title><rect x="2.1549%" y="485" width="0.0128%" height="15" fill="rgb(217,5,26)" fg:x="212660589449" fg:w="1259769661"/><text x="2.4049%" y="495.50"></text></g><g><title>alloc::slice::&lt;impl alloc::borrow::ToOwned for [T]&gt;::to_owned (1,259,769,661 samples, 0.01%)</title><rect x="2.1549%" y="469" width="0.0128%" height="15" fill="rgb(235,190,38)" fg:x="212660589449" fg:w="1259769661"/><text x="2.4049%" y="479.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (1,259,769,661 samples, 0.01%)</title><rect x="2.1549%" y="453" width="0.0128%" height="15" fill="rgb(247,86,24)" fg:x="212660589449" fg:w="1259769661"/><text x="2.4049%" y="463.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1,259,769,661 samples, 0.01%)</title><rect x="2.1549%" y="437" width="0.0128%" height="15" fill="rgb(205,101,16)" fg:x="212660589449" fg:w="1259769661"/><text x="2.4049%" y="447.50"></text></g><g><title>alloc::slice::hack::to_vec (1,259,769,661 samples, 0.01%)</title><rect x="2.1549%" y="421" width="0.0128%" height="15" fill="rgb(246,168,33)" fg:x="212660589449" fg:w="1259769661"/><text x="2.4049%" y="431.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1,259,769,661 samples, 0.01%)</title><rect x="2.1549%" y="405" width="0.0128%" height="15" fill="rgb(231,114,1)" fg:x="212660589449" fg:w="1259769661"/><text x="2.4049%" y="415.50"></text></g><g><title>&lt;core::str::iter::Split&lt;P&gt; as core::iter::traits::iterator::Iterator&gt;::next (2,432,012,775 samples, 0.02%)</title><rect x="2.1695%" y="533" width="0.0246%" height="15" fill="rgb(207,184,53)" fg:x="214102166792" fg:w="2432012775"/><text x="2.4195%" y="543.50"></text></g><g><title>core::str::iter::SplitInternal&lt;P&gt;::next (2,432,012,775 samples, 0.02%)</title><rect x="2.1695%" y="517" width="0.0246%" height="15" fill="rgb(224,95,51)" fg:x="214102166792" fg:w="2432012775"/><text x="2.4195%" y="527.50"></text></g><g><title>&lt;core::str::pattern::CharSearcher as core::str::pattern::Searcher&gt;::next_match (2,387,648,610 samples, 0.02%)</title><rect x="2.1699%" y="501" width="0.0242%" height="15" fill="rgb(212,188,45)" fg:x="214146530957" fg:w="2387648610"/><text x="2.4199%" y="511.50"></text></g><g><title>core::slice::memchr::memchr (1,901,669,674 samples, 0.02%)</title><rect x="2.1749%" y="485" width="0.0193%" height="15" fill="rgb(223,154,38)" fg:x="214632509893" fg:w="1901669674"/><text x="2.4249%" y="495.50"></text></g><g><title>core::slice::memchr::memchr_aligned (1,901,669,674 samples, 0.02%)</title><rect x="2.1749%" y="469" width="0.0193%" height="15" fill="rgb(251,22,52)" fg:x="214632509893" fg:w="1901669674"/><text x="2.4249%" y="479.50"></text></g><g><title>core::slice::memchr::memchr_aligned::runtime (1,661,338,795 samples, 0.02%)</title><rect x="2.1773%" y="453" width="0.0168%" height="15" fill="rgb(229,209,22)" fg:x="214872840772" fg:w="1661338795"/><text x="2.4273%" y="463.50"></text></g><g><title>core::option::Option&lt;&amp;T&gt;::cloned (6,077,200,940 samples, 0.06%)</title><rect x="2.2015%" y="533" width="0.0616%" height="15" fill="rgb(234,138,34)" fg:x="217261958056" fg:w="6077200940"/><text x="2.4515%" y="543.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (2,088,103,146 samples, 0.02%)</title><rect x="2.2419%" y="517" width="0.0212%" height="15" fill="rgb(212,95,11)" fg:x="221251055850" fg:w="2088103146"/><text x="2.4919%" y="527.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1,993,039,544 samples, 0.02%)</title><rect x="2.2429%" y="501" width="0.0202%" height="15" fill="rgb(240,179,47)" fg:x="221346119452" fg:w="1993039544"/><text x="2.4929%" y="511.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1,993,039,544 samples, 0.02%)</title><rect x="2.2429%" y="485" width="0.0202%" height="15" fill="rgb(240,163,11)" fg:x="221346119452" fg:w="1993039544"/><text x="2.4929%" y="495.50"></text></g><g><title>alloc::slice::hack::to_vec (1,993,039,544 samples, 0.02%)</title><rect x="2.2429%" y="469" width="0.0202%" height="15" fill="rgb(236,37,12)" fg:x="221346119452" fg:w="1993039544"/><text x="2.4929%" y="479.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1,993,039,544 samples, 0.02%)</title><rect x="2.2429%" y="453" width="0.0202%" height="15" fill="rgb(232,164,16)" fg:x="221346119452" fg:w="1993039544"/><text x="2.4929%" y="463.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1,793,117,243 samples, 0.02%)</title><rect x="2.2449%" y="437" width="0.0182%" height="15" fill="rgb(244,205,15)" fg:x="221546041753" fg:w="1793117243"/><text x="2.4949%" y="447.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1,793,117,243 samples, 0.02%)</title><rect x="2.2449%" y="421" width="0.0182%" height="15" fill="rgb(223,117,47)" fg:x="221546041753" fg:w="1793117243"/><text x="2.4949%" y="431.50"></text></g><g><title>__memmove_avx512_unaligned_erms (1,793,117,243 samples, 0.02%)</title><rect x="2.2449%" y="405" width="0.0182%" height="15" fill="rgb(244,107,35)" fg:x="221546041753" fg:w="1793117243"/><text x="2.4949%" y="415.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::clone::Clone&gt;::clone (1,201,689,116 samples, 0.01%)</title><rect x="2.2761%" y="517" width="0.0122%" height="15" fill="rgb(205,140,8)" fg:x="224625076687" fg:w="1201689116"/><text x="2.5261%" y="527.50"></text></g><g><title>&lt;usize as core::ops::bit::BitXor&gt;::bitxor (3,616,526,918 samples, 0.04%)</title><rect x="2.2992%" y="229" width="0.0366%" height="15" fill="rgb(228,84,46)" fg:x="226904842160" fg:w="3616526918"/><text x="2.5492%" y="239.50"></text></g><g><title>&lt;rustc_hash::FxHasher as core::hash::Hasher&gt;::write (9,055,532,563 samples, 0.09%)</title><rect x="2.2928%" y="261" width="0.0918%" height="15" fill="rgb(254,188,9)" fg:x="226276311123" fg:w="9055532563"/><text x="2.5428%" y="271.50"></text></g><g><title>rustc_hash::FxHasher::add_to_hash (8,427,001,526 samples, 0.09%)</title><rect x="2.2992%" y="245" width="0.0854%" height="15" fill="rgb(206,112,54)" fg:x="226904842160" fg:w="8427001526"/><text x="2.5492%" y="255.50"></text></g><g><title>core::num::&lt;impl usize&gt;::wrapping_mul (3,876,167,872 samples, 0.04%)</title><rect x="2.3453%" y="229" width="0.0393%" height="15" fill="rgb(216,84,49)" fg:x="231455675814" fg:w="3876167872"/><text x="2.5953%" y="239.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash::_{{closure}} (9,345,773,104 samples, 0.09%)</title><rect x="2.2914%" y="389" width="0.0947%" height="15" fill="rgb(214,194,35)" fg:x="226135728988" fg:w="9345773104"/><text x="2.5414%" y="399.50"></text></g><g><title>hashbrown::map::make_hasher::_{{closure}} (9,345,773,104 samples, 0.09%)</title><rect x="2.2914%" y="373" width="0.0947%" height="15" fill="rgb(249,28,3)" fg:x="226135728988" fg:w="9345773104"/><text x="2.5414%" y="383.50"></text></g><g><title>hashbrown::map::make_hash (9,345,773,104 samples, 0.09%)</title><rect x="2.2914%" y="357" width="0.0947%" height="15" fill="rgb(222,56,52)" fg:x="226135728988" fg:w="9345773104"/><text x="2.5414%" y="367.50"></text></g><g><title>core::hash::BuildHasher::hash_one (9,345,773,104 samples, 0.09%)</title><rect x="2.2914%" y="341" width="0.0947%" height="15" fill="rgb(245,217,50)" fg:x="226135728988" fg:w="9345773104"/><text x="2.5414%" y="351.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (9,345,773,104 samples, 0.09%)</title><rect x="2.2914%" y="325" width="0.0947%" height="15" fill="rgb(213,201,24)" fg:x="226135728988" fg:w="9345773104"/><text x="2.5414%" y="335.50"></text></g><g><title>&lt;alloc::string::String as core::hash::Hash&gt;::hash (9,251,524,973 samples, 0.09%)</title><rect x="2.2924%" y="309" width="0.0937%" height="15" fill="rgb(248,116,28)" fg:x="226229977119" fg:w="9251524973"/><text x="2.5424%" y="319.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for str&gt;::hash (9,251,524,973 samples, 0.09%)</title><rect x="2.2924%" y="293" width="0.0937%" height="15" fill="rgb(219,72,43)" fg:x="226229977119" fg:w="9251524973"/><text x="2.5424%" y="303.50"></text></g><g><title>core::hash::Hasher::write_str (9,251,524,973 samples, 0.09%)</title><rect x="2.2924%" y="277" width="0.0937%" height="15" fill="rgb(209,138,14)" fg:x="226229977119" fg:w="9251524973"/><text x="2.5424%" y="287.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_insert_slot (1,027,401,491 samples, 0.01%)</title><rect x="2.3866%" y="373" width="0.0104%" height="15" fill="rgb(222,18,33)" fg:x="235531549493" fg:w="1027401491"/><text x="2.6366%" y="383.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve (10,471,012,826 samples, 0.11%)</title><rect x="2.2914%" y="453" width="0.1061%" height="15" fill="rgb(213,199,7)" fg:x="226135728988" fg:w="10471012826"/><text x="2.5414%" y="463.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (10,471,012,826 samples, 0.11%)</title><rect x="2.2914%" y="437" width="0.1061%" height="15" fill="rgb(250,110,10)" fg:x="226135728988" fg:w="10471012826"/><text x="2.5414%" y="447.50"></text></g><g><title>hashbrown::raw::RawTableInner::reserve_rehash_inner (10,471,012,826 samples, 0.11%)</title><rect x="2.2914%" y="421" width="0.1061%" height="15" fill="rgb(248,123,6)" fg:x="226135728988" fg:w="10471012826"/><text x="2.5414%" y="431.50"></text></g><g><title>hashbrown::raw::RawTableInner::resize_inner (10,471,012,826 samples, 0.11%)</title><rect x="2.2914%" y="405" width="0.1061%" height="15" fill="rgb(206,91,31)" fg:x="226135728988" fg:w="10471012826"/><text x="2.5414%" y="415.50"></text></g><g><title>hashbrown::raw::RawTableInner::prepare_insert_slot (1,075,192,321 samples, 0.01%)</title><rect x="2.3866%" y="389" width="0.0109%" height="15" fill="rgb(211,154,13)" fg:x="235531549493" fg:w="1075192321"/><text x="2.6366%" y="399.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::find_or_find_insert_slot (11,738,244,181 samples, 0.12%)</title><rect x="2.2909%" y="485" width="0.1189%" height="15" fill="rgb(225,148,7)" fg:x="226087626638" fg:w="11738244181"/><text x="2.5409%" y="495.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find_or_find_insert_slot (11,738,244,181 samples, 0.12%)</title><rect x="2.2909%" y="469" width="0.1189%" height="15" fill="rgb(220,160,43)" fg:x="226087626638" fg:w="11738244181"/><text x="2.5409%" y="479.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_or_find_insert_slot_inner (1,219,129,005 samples, 0.01%)</title><rect x="2.3975%" y="453" width="0.0124%" height="15" fill="rgb(213,52,39)" fg:x="236606741814" fg:w="1219129005"/><text x="2.6475%" y="463.50"></text></g><g><title>&lt;usize as core::ops::bit::BitXor&gt;::bitxor (1,209,768,288 samples, 0.01%)</title><rect x="2.4114%" y="357" width="0.0123%" height="15" fill="rgb(243,137,7)" fg:x="237974352543" fg:w="1209768288"/><text x="2.6614%" y="367.50"></text></g><g><title>hashbrown::map::make_hash (1,636,449,796 samples, 0.02%)</title><rect x="2.4099%" y="485" width="0.0166%" height="15" fill="rgb(230,79,13)" fg:x="237825870819" fg:w="1636449796"/><text x="2.6599%" y="495.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1,636,449,796 samples, 0.02%)</title><rect x="2.4099%" y="469" width="0.0166%" height="15" fill="rgb(247,105,23)" fg:x="237825870819" fg:w="1636449796"/><text x="2.6599%" y="479.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (1,636,449,796 samples, 0.02%)</title><rect x="2.4099%" y="453" width="0.0166%" height="15" fill="rgb(223,179,41)" fg:x="237825870819" fg:w="1636449796"/><text x="2.6599%" y="463.50"></text></g><g><title>&lt;alloc::string::String as core::hash::Hash&gt;::hash (1,636,449,796 samples, 0.02%)</title><rect x="2.4099%" y="437" width="0.0166%" height="15" fill="rgb(218,9,34)" fg:x="237825870819" fg:w="1636449796"/><text x="2.6599%" y="447.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for str&gt;::hash (1,636,449,796 samples, 0.02%)</title><rect x="2.4099%" y="421" width="0.0166%" height="15" fill="rgb(222,106,8)" fg:x="237825870819" fg:w="1636449796"/><text x="2.6599%" y="431.50"></text></g><g><title>core::hash::Hasher::write_str (1,636,449,796 samples, 0.02%)</title><rect x="2.4099%" y="405" width="0.0166%" height="15" fill="rgb(211,220,0)" fg:x="237825870819" fg:w="1636449796"/><text x="2.6599%" y="415.50"></text></g><g><title>&lt;rustc_hash::FxHasher as core::hash::Hasher&gt;::write (1,636,449,796 samples, 0.02%)</title><rect x="2.4099%" y="389" width="0.0166%" height="15" fill="rgb(229,52,16)" fg:x="237825870819" fg:w="1636449796"/><text x="2.6599%" y="399.50"></text></g><g><title>rustc_hash::FxHasher::add_to_hash (1,487,968,072 samples, 0.02%)</title><rect x="2.4114%" y="373" width="0.0151%" height="15" fill="rgb(212,155,18)" fg:x="237974352543" fg:w="1487968072"/><text x="2.6614%" y="383.50"></text></g><g><title>llvm_profparser::instrumentation_profile::types::InstrumentationProfile::push_record (15,477,166,411 samples, 0.16%)</title><rect x="2.2756%" y="533" width="0.1568%" height="15" fill="rgb(242,21,14)" fg:x="224578280170" fg:w="15477166411"/><text x="2.5256%" y="543.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::insert (13,967,819,943 samples, 0.14%)</title><rect x="2.2909%" y="517" width="0.1415%" height="15" fill="rgb(222,19,48)" fg:x="226087626638" fg:w="13967819943"/><text x="2.5409%" y="527.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (13,967,819,943 samples, 0.14%)</title><rect x="2.2909%" y="501" width="0.1415%" height="15" fill="rgb(232,45,27)" fg:x="226087626638" fg:w="13967819943"/><text x="2.5409%" y="511.50"></text></g><g><title>md5::consume (1,650,130,429 samples, 0.02%)</title><rect x="2.4430%" y="469" width="0.0167%" height="15" fill="rgb(249,103,42)" fg:x="241093709811" fg:w="1650130429"/><text x="2.6930%" y="479.50"></text></g><g><title>md5::Context::compute (5,279,039,804 samples, 0.05%)</title><rect x="2.4382%" y="485" width="0.0535%" height="15" fill="rgb(246,81,33)" fg:x="240623710863" fg:w="5279039804"/><text x="2.6882%" y="495.50"></text></g><g><title>md5::transform (3,158,910,427 samples, 0.03%)</title><rect x="2.4597%" y="469" width="0.0320%" height="15" fill="rgb(252,33,42)" fg:x="242743840240" fg:w="3158910427"/><text x="2.7097%" y="479.50"></text></g><g><title>core::num::&lt;impl u32&gt;::wrapping_add (1,888,415,479 samples, 0.02%)</title><rect x="2.4726%" y="453" width="0.0191%" height="15" fill="rgb(209,212,41)" fg:x="244014335188" fg:w="1888415479"/><text x="2.7226%" y="463.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (1,267,103,487 samples, 0.01%)</title><rect x="2.5586%" y="453" width="0.0128%" height="15" fill="rgb(207,154,6)" fg:x="252501747895" fg:w="1267103487"/><text x="2.8086%" y="463.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (1,122,604,980 samples, 0.01%)</title><rect x="2.5600%" y="437" width="0.0114%" height="15" fill="rgb(223,64,47)" fg:x="252646246402" fg:w="1122604980"/><text x="2.8100%" y="447.50"></text></g><g><title>md5::Context::consume (25,577,698,641 samples, 0.26%)</title><rect x="2.4917%" y="485" width="0.2592%" height="15" fill="rgb(211,161,38)" fg:x="245902750667" fg:w="25577698641"/><text x="2.7417%" y="495.50"></text></g><g><title>md5::consume (25,481,521,694 samples, 0.26%)</title><rect x="2.4927%" y="469" width="0.2582%" height="15" fill="rgb(219,138,40)" fg:x="245998927614" fg:w="25481521694"/><text x="2.7427%" y="479.50"></text></g><g><title>md5::transform (17,711,597,926 samples, 0.18%)</title><rect x="2.5714%" y="453" width="0.1795%" height="15" fill="rgb(241,228,46)" fg:x="253768851382" fg:w="17711597926"/><text x="2.8214%" y="463.50"></text></g><g><title>core::num::&lt;impl u32&gt;::wrapping_add (9,571,184,341 samples, 0.10%)</title><rect x="2.6539%" y="437" width="0.0970%" height="15" fill="rgb(223,209,38)" fg:x="261909264967" fg:w="9571184341"/><text x="2.9039%" y="447.50"></text></g><g><title>llvm_profparser::instrumentation_profile::types::compute_hash (31,377,499,189 samples, 0.32%)</title><rect x="2.4334%" y="517" width="0.3179%" height="15" fill="rgb(236,164,45)" fg:x="240148926211" fg:w="31377499189"/><text x="2.6834%" y="527.50"></text></g><g><title>md5::compute (31,328,253,968 samples, 0.32%)</title><rect x="2.4339%" y="501" width="0.3174%" height="15" fill="rgb(231,15,5)" fg:x="240198171432" fg:w="31328253968"/><text x="2.6839%" y="511.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::find_or_find_insert_slot (1,790,067,375 samples, 0.02%)</title><rect x="2.7514%" y="485" width="0.0181%" height="15" fill="rgb(252,35,15)" fg:x="271526425400" fg:w="1790067375"/><text x="3.0014%" y="495.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find_or_find_insert_slot (1,790,067,375 samples, 0.02%)</title><rect x="2.7514%" y="469" width="0.0181%" height="15" fill="rgb(248,181,18)" fg:x="271526425400" fg:w="1790067375"/><text x="3.0014%" y="479.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_or_find_insert_slot_inner (1,359,775,075 samples, 0.01%)</title><rect x="2.7557%" y="453" width="0.0138%" height="15" fill="rgb(233,39,42)" fg:x="271956717700" fg:w="1359775075"/><text x="3.0057%" y="463.50"></text></g><g><title>llvm_profparser::instrumentation_profile::types::Symtab::add_func_name (33,452,836,009 samples, 0.34%)</title><rect x="2.4325%" y="533" width="0.3390%" height="15" fill="rgb(238,110,33)" fg:x="240055446581" fg:w="33452836009"/><text x="2.6825%" y="543.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::insert (1,981,857,190 samples, 0.02%)</title><rect x="2.7514%" y="517" width="0.0201%" height="15" fill="rgb(233,195,10)" fg:x="271526425400" fg:w="1981857190"/><text x="3.0014%" y="527.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1,981,857,190 samples, 0.02%)</title><rect x="2.7514%" y="501" width="0.0201%" height="15" fill="rgb(254,105,3)" fg:x="271526425400" fg:w="1981857190"/><text x="3.0014%" y="511.50"></text></g><g><title>miniz_oxide::inflate::core::decompress_fast (1,973,718,292 samples, 0.02%)</title><rect x="2.8024%" y="293" width="0.0200%" height="15" fill="rgb(221,225,9)" fg:x="276561124047" fg:w="1973718292"/><text x="3.0524%" y="303.50"></text></g><g><title>&lt;adler2::algo::U32X4 as core::ops::arith::AddAssign&gt;::add_assign (1,194,435,968 samples, 0.01%)</title><rect x="2.8229%" y="245" width="0.0121%" height="15" fill="rgb(224,227,45)" fg:x="278583682514" fg:w="1194435968"/><text x="3.0729%" y="255.50"></text></g><g><title>miniz_oxide::inflate::core::decompress (4,322,473,565 samples, 0.04%)</title><rect x="2.7999%" y="309" width="0.0438%" height="15" fill="rgb(229,198,43)" fg:x="276322226879" fg:w="4322473565"/><text x="3.0499%" y="319.50"></text></g><g><title>miniz_oxide::shared::update_adler32 (2,061,017,930 samples, 0.02%)</title><rect x="2.8229%" y="293" width="0.0209%" height="15" fill="rgb(206,209,35)" fg:x="278583682514" fg:w="2061017930"/><text x="3.0729%" y="303.50"></text></g><g><title>adler2::Adler32::write_slice (2,061,017,930 samples, 0.02%)</title><rect x="2.8229%" y="277" width="0.0209%" height="15" fill="rgb(245,195,53)" fg:x="278583682514" fg:w="2061017930"/><text x="3.0729%" y="287.50"></text></g><g><title>adler2::algo::&lt;impl adler2::Adler32&gt;::compute (2,061,017,930 samples, 0.02%)</title><rect x="2.8229%" y="261" width="0.0209%" height="15" fill="rgb(240,92,26)" fg:x="278583682514" fg:w="2061017930"/><text x="3.0729%" y="271.50"></text></g><g><title>miniz_oxide::inflate::stream::inflate_loop (4,562,413,622 samples, 0.05%)</title><rect x="2.7999%" y="325" width="0.0462%" height="15" fill="rgb(207,40,23)" fg:x="276322226879" fg:w="4562413622"/><text x="3.0499%" y="335.50"></text></g><g><title>std::io::Read::read_buf (5,469,841,461 samples, 0.06%)</title><rect x="2.7913%" y="485" width="0.0554%" height="15" fill="rgb(223,111,35)" fg:x="275464483142" fg:w="5469841461"/><text x="3.0413%" y="495.50"></text></g><g><title>std::io::default_read_buf (5,469,841,461 samples, 0.06%)</title><rect x="2.7913%" y="469" width="0.0554%" height="15" fill="rgb(229,147,28)" fg:x="275464483142" fg:w="5469841461"/><text x="3.0413%" y="479.50"></text></g><g><title>std::io::Read::read_buf::_{{closure}} (4,706,515,960 samples, 0.05%)</title><rect x="2.7990%" y="453" width="0.0477%" height="15" fill="rgb(211,29,28)" fg:x="276227808643" fg:w="4706515960"/><text x="3.0490%" y="463.50"></text></g><g><title>&lt;flate2::zlib::read::ZlibDecoder&lt;R&gt; as std::io::Read&gt;::read (4,706,515,960 samples, 0.05%)</title><rect x="2.7990%" y="437" width="0.0477%" height="15" fill="rgb(228,72,33)" fg:x="276227808643" fg:w="4706515960"/><text x="3.0490%" y="447.50"></text></g><g><title>&lt;flate2::zlib::bufread::ZlibDecoder&lt;R&gt; as std::io::Read&gt;::read (4,706,515,960 samples, 0.05%)</title><rect x="2.7990%" y="421" width="0.0477%" height="15" fill="rgb(205,214,31)" fg:x="276227808643" fg:w="4706515960"/><text x="3.0490%" y="431.50"></text></g><g><title>flate2::zio::read (4,706,515,960 samples, 0.05%)</title><rect x="2.7990%" y="405" width="0.0477%" height="15" fill="rgb(224,111,15)" fg:x="276227808643" fg:w="4706515960"/><text x="3.0490%" y="415.50"></text></g><g><title>flate2::mem::Decompress::decompress (4,706,515,960 samples, 0.05%)</title><rect x="2.7990%" y="389" width="0.0477%" height="15" fill="rgb(253,21,26)" fg:x="276227808643" fg:w="4706515960"/><text x="3.0490%" y="399.50"></text></g><g><title>flate2::mem::Decompress::decompress (4,706,515,960 samples, 0.05%)</title><rect x="2.7990%" y="373" width="0.0477%" height="15" fill="rgb(245,139,43)" fg:x="276227808643" fg:w="4706515960"/><text x="3.0490%" y="383.50"></text></g><g><title>&lt;flate2::ffi::rust::Inflate as flate2::ffi::InflateBackend&gt;::decompress (4,706,515,960 samples, 0.05%)</title><rect x="2.7990%" y="357" width="0.0477%" height="15" fill="rgb(252,170,7)" fg:x="276227808643" fg:w="4706515960"/><text x="3.0490%" y="367.50"></text></g><g><title>miniz_oxide::inflate::stream::inflate (4,612,097,724 samples, 0.05%)</title><rect x="2.7999%" y="341" width="0.0467%" height="15" fill="rgb(231,118,14)" fg:x="276322226879" fg:w="4612097724"/><text x="3.0499%" y="351.50"></text></g><g><title>miniz_oxide::inflate::core::decompress_fast (1,734,527,576 samples, 0.02%)</title><rect x="2.8486%" y="325" width="0.0176%" height="15" fill="rgb(238,83,0)" fg:x="281124487578" fg:w="1734527576"/><text x="3.0986%" y="335.50"></text></g><g><title>llvm_profparser::util::parse_string_ref (9,945,738,670 samples, 0.10%)</title><rect x="2.7749%" y="533" width="0.1008%" height="15" fill="rgb(221,39,39)" fg:x="273850347390" fg:w="9945738670"/><text x="3.0249%" y="543.50"></text></g><g><title>std::io::Read::read_to_end (8,859,167,200 samples, 0.09%)</title><rect x="2.7859%" y="517" width="0.0898%" height="15" fill="rgb(222,119,46)" fg:x="274936918860" fg:w="8859167200"/><text x="3.0359%" y="527.50"></text></g><g><title>std::io::default_read_to_end (8,859,167,200 samples, 0.09%)</title><rect x="2.7859%" y="501" width="0.0898%" height="15" fill="rgb(222,165,49)" fg:x="274936918860" fg:w="8859167200"/><text x="3.0359%" y="511.50"></text></g><g><title>std::io::default_read_to_end::small_probe_read (2,861,761,457 samples, 0.03%)</title><rect x="2.8467%" y="485" width="0.0290%" height="15" fill="rgb(219,113,52)" fg:x="280934324603" fg:w="2861761457"/><text x="3.0967%" y="495.50"></text></g><g><title>&lt;flate2::zlib::read::ZlibDecoder&lt;R&gt; as std::io::Read&gt;::read (2,861,761,457 samples, 0.03%)</title><rect x="2.8467%" y="469" width="0.0290%" height="15" fill="rgb(214,7,15)" fg:x="280934324603" fg:w="2861761457"/><text x="3.0967%" y="479.50"></text></g><g><title>&lt;flate2::zlib::bufread::ZlibDecoder&lt;R&gt; as std::io::Read&gt;::read (2,861,761,457 samples, 0.03%)</title><rect x="2.8467%" y="453" width="0.0290%" height="15" fill="rgb(235,32,4)" fg:x="280934324603" fg:w="2861761457"/><text x="3.0967%" y="463.50"></text></g><g><title>flate2::zio::read (2,861,761,457 samples, 0.03%)</title><rect x="2.8467%" y="437" width="0.0290%" height="15" fill="rgb(238,90,54)" fg:x="280934324603" fg:w="2861761457"/><text x="3.0967%" y="447.50"></text></g><g><title>flate2::mem::Decompress::decompress (2,861,761,457 samples, 0.03%)</title><rect x="2.8467%" y="421" width="0.0290%" height="15" fill="rgb(213,208,19)" fg:x="280934324603" fg:w="2861761457"/><text x="3.0967%" y="431.50"></text></g><g><title>flate2::mem::Decompress::decompress (2,861,761,457 samples, 0.03%)</title><rect x="2.8467%" y="405" width="0.0290%" height="15" fill="rgb(233,156,4)" fg:x="280934324603" fg:w="2861761457"/><text x="3.0967%" y="415.50"></text></g><g><title>&lt;flate2::ffi::rust::Inflate as flate2::ffi::InflateBackend&gt;::decompress (2,861,761,457 samples, 0.03%)</title><rect x="2.8467%" y="389" width="0.0290%" height="15" fill="rgb(207,194,5)" fg:x="280934324603" fg:w="2861761457"/><text x="3.0967%" y="399.50"></text></g><g><title>miniz_oxide::inflate::stream::inflate (2,815,695,980 samples, 0.03%)</title><rect x="2.8471%" y="373" width="0.0285%" height="15" fill="rgb(206,111,30)" fg:x="280980390080" fg:w="2815695980"/><text x="3.0971%" y="383.50"></text></g><g><title>miniz_oxide::inflate::stream::inflate_loop (2,815,695,980 samples, 0.03%)</title><rect x="2.8471%" y="357" width="0.0285%" height="15" fill="rgb(243,70,54)" fg:x="280980390080" fg:w="2815695980"/><text x="3.0971%" y="367.50"></text></g><g><title>miniz_oxide::inflate::core::decompress (2,815,695,980 samples, 0.03%)</title><rect x="2.8471%" y="341" width="0.0285%" height="15" fill="rgb(242,28,8)" fg:x="280980390080" fg:w="2815695980"/><text x="3.0971%" y="351.50"></text></g><g><title>core::intrinsics::likely (2,077,322,571 samples, 0.02%)</title><rect x="2.8757%" y="437" width="0.0210%" height="15" fill="rgb(219,106,18)" fg:x="283796086060" fg:w="2077322571"/><text x="3.1257%" y="447.50"></text></g><g><title>cargo_tarpaulin::process_handling::get_test_coverage (211,930,039,652 samples, 2.15%)</title><rect x="0.7498%" y="677" width="2.1475%" height="15" fill="rgb(244,222,10)" fg:x="73993537676" fg:w="211930039652"/><text x="0.9998%" y="687.50">c..</text></g><g><title>cargo_tarpaulin::process_handling::collect_coverage (211,930,039,652 samples, 2.15%)</title><rect x="0.7498%" y="661" width="2.1475%" height="15" fill="rgb(236,179,52)" fg:x="73993537676" fg:w="211930039652"/><text x="0.9998%" y="671.50">c..</text></g><g><title>cargo_tarpaulin::statemachine::TestState::step (211,930,039,652 samples, 2.15%)</title><rect x="0.7498%" y="645" width="2.1475%" height="15" fill="rgb(213,23,39)" fg:x="73993537676" fg:w="211930039652"/><text x="0.9998%" y="655.50">c..</text></g><g><title>&lt;alloc::boxed::Box&lt;dyn cargo_tarpaulin::statemachine::StateData&gt; as cargo_tarpaulin::statemachine::StateData&gt;::wait (211,930,039,652 samples, 2.15%)</title><rect x="0.7498%" y="629" width="2.1475%" height="15" fill="rgb(238,48,10)" fg:x="73993537676" fg:w="211930039652"/><text x="0.9998%" y="639.50">&lt;..</text></g><g><title>&lt;cargo_tarpaulin::statemachine::instrumented::LlvmInstrumentedData as cargo_tarpaulin::statemachine::StateData&gt;::wait (211,930,039,652 samples, 2.15%)</title><rect x="0.7498%" y="613" width="2.1475%" height="15" fill="rgb(251,196,23)" fg:x="73993537676" fg:w="211930039652"/><text x="0.9998%" y="623.50">&lt;..</text></g><g><title>llvm_profparser::merge_profiles (73,636,902,805 samples, 0.75%)</title><rect x="2.1511%" y="597" width="0.7462%" height="15" fill="rgb(250,152,24)" fg:x="212286674523" fg:w="73636902805"/><text x="2.4011%" y="607.50"></text></g><g><title>llvm_profparser::instrumentation_profile::parse (73,636,902,805 samples, 0.75%)</title><rect x="2.1511%" y="581" width="0.7462%" height="15" fill="rgb(209,150,17)" fg:x="212286674523" fg:w="73636902805"/><text x="2.4011%" y="591.50"></text></g><g><title>llvm_profparser::instrumentation_profile::parse_bytes (73,636,902,805 samples, 0.75%)</title><rect x="2.1511%" y="565" width="0.7462%" height="15" fill="rgb(234,202,34)" fg:x="212286674523" fg:w="73636902805"/><text x="2.4011%" y="575.50"></text></g><g><title>&lt;llvm_profparser::instrumentation_profile::raw_profile::RawInstrProf&lt;T&gt; as llvm_profparser::instrumentation_profile::InstrProfReader&gt;::parse_bytes (73,636,902,805 samples, 0.75%)</title><rect x="2.1511%" y="549" width="0.7462%" height="15" fill="rgb(253,148,53)" fg:x="212286674523" fg:w="73636902805"/><text x="2.4011%" y="559.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (2,127,491,268 samples, 0.02%)</title><rect x="2.8757%" y="533" width="0.0216%" height="15" fill="rgb(218,129,16)" fg:x="283796086060" fg:w="2127491268"/><text x="3.1257%" y="543.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (2,127,491,268 samples, 0.02%)</title><rect x="2.8757%" y="517" width="0.0216%" height="15" fill="rgb(216,85,19)" fg:x="283796086060" fg:w="2127491268"/><text x="3.1257%" y="527.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (2,127,491,268 samples, 0.02%)</title><rect x="2.8757%" y="501" width="0.0216%" height="15" fill="rgb(235,228,7)" fg:x="283796086060" fg:w="2127491268"/><text x="3.1257%" y="511.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (2,127,491,268 samples, 0.02%)</title><rect x="2.8757%" y="485" width="0.0216%" height="15" fill="rgb(245,175,0)" fg:x="283796086060" fg:w="2127491268"/><text x="3.1257%" y="495.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (2,127,491,268 samples, 0.02%)</title><rect x="2.8757%" y="469" width="0.0216%" height="15" fill="rgb(208,168,36)" fg:x="283796086060" fg:w="2127491268"/><text x="3.1257%" y="479.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (2,127,491,268 samples, 0.02%)</title><rect x="2.8757%" y="453" width="0.0216%" height="15" fill="rgb(246,171,24)" fg:x="283796086060" fg:w="2127491268"/><text x="3.1257%" y="463.50"></text></g><g><title>cargo_tarpaulin::source_analysis::items::&lt;impl cargo_tarpaulin::source_analysis::SourceAnalysis&gt;::visit_impl (1,156,450,618 samples, 0.01%)</title><rect x="2.9059%" y="629" width="0.0117%" height="15" fill="rgb(215,142,24)" fg:x="286782580185" fg:w="1156450618"/><text x="3.1559%" y="639.50"></text></g><g><title>cargo_tarpaulin::source_analysis::items::&lt;impl cargo_tarpaulin::source_analysis::SourceAnalysis&gt;::visit_fn (1,156,450,618 samples, 0.01%)</title><rect x="2.9059%" y="613" width="0.0117%" height="15" fill="rgb(250,187,7)" fg:x="286782580185" fg:w="1156450618"/><text x="3.1559%" y="623.50"></text></g><g><title>cargo_tarpaulin::source_analysis::items::&lt;impl cargo_tarpaulin::source_analysis::SourceAnalysis&gt;::process_items (2,152,649,090 samples, 0.02%)</title><rect x="2.8972%" y="645" width="0.0218%" height="15" fill="rgb(228,66,33)" fg:x="285923577328" fg:w="2152649090"/><text x="3.1472%" y="655.50"></text></g><g><title>cargo_tarpaulin::main (214,167,710,886 samples, 2.17%)</title><rect x="0.7498%" y="757" width="2.1701%" height="15" fill="rgb(234,215,21)" fg:x="73993537676" fg:w="214167710886"/><text x="0.9998%" y="767.50">c..</text></g><g><title>cargo_tarpaulin::run (214,167,710,886 samples, 2.17%)</title><rect x="0.7498%" y="741" width="2.1701%" height="15" fill="rgb(222,191,20)" fg:x="73993537676" fg:w="214167710886"/><text x="0.9998%" y="751.50">c..</text></g><g><title>cargo_tarpaulin::collect_tracemap (214,167,710,886 samples, 2.17%)</title><rect x="0.7498%" y="725" width="2.1701%" height="15" fill="rgb(245,79,54)" fg:x="73993537676" fg:w="214167710886"/><text x="0.9998%" y="735.50">c..</text></g><g><title>cargo_tarpaulin::trace (214,167,710,886 samples, 2.17%)</title><rect x="0.7498%" y="709" width="2.1701%" height="15" fill="rgb(240,10,37)" fg:x="73993537676" fg:w="214167710886"/><text x="0.9998%" y="719.50">c..</text></g><g><title>cargo_tarpaulin::launch_tarpaulin (214,167,710,886 samples, 2.17%)</title><rect x="0.7498%" y="693" width="2.1701%" height="15" fill="rgb(214,192,32)" fg:x="73993537676" fg:w="214167710886"/><text x="0.9998%" y="703.50">c..</text></g><g><title>cargo_tarpaulin::source_analysis::SourceAnalysis::get_analysis (2,237,671,234 samples, 0.02%)</title><rect x="2.8972%" y="677" width="0.0227%" height="15" fill="rgb(209,36,54)" fg:x="285923577328" fg:w="2237671234"/><text x="3.1472%" y="687.50"></text></g><g><title>cargo_tarpaulin::source_analysis::SourceAnalysis::analyse_package (2,237,671,234 samples, 0.02%)</title><rect x="2.8972%" y="661" width="0.0227%" height="15" fill="rgb(220,10,11)" fg:x="285923577328" fg:w="2237671234"/><text x="3.1472%" y="671.50"></text></g><g><title>cargo_tarpaulin::run (1,492,363,058 samples, 0.02%)</title><rect x="2.9199%" y="757" width="0.0151%" height="15" fill="rgb(221,106,17)" fg:x="288161248562" fg:w="1492363058"/><text x="3.1699%" y="767.50"></text></g><g><title>cargo_tarpaulin::collect_tracemap (1,492,363,058 samples, 0.02%)</title><rect x="2.9199%" y="741" width="0.0151%" height="15" fill="rgb(251,142,44)" fg:x="288161248562" fg:w="1492363058"/><text x="3.1699%" y="751.50"></text></g><g><title>cargo_tarpaulin::trace (1,492,363,058 samples, 0.02%)</title><rect x="2.9199%" y="725" width="0.0151%" height="15" fill="rgb(238,13,15)" fg:x="288161248562" fg:w="1492363058"/><text x="3.1699%" y="735.50"></text></g><g><title>cargo_tarpaulin::launch_tarpaulin (1,492,363,058 samples, 0.02%)</title><rect x="2.9199%" y="709" width="0.0151%" height="15" fill="rgb(208,107,27)" fg:x="288161248562" fg:w="1492363058"/><text x="3.1699%" y="719.50"></text></g><g><title>std::path::Components::finished (2,647,969,133 samples, 0.03%)</title><rect x="3.0420%" y="181" width="0.0268%" height="15" fill="rgb(205,136,37)" fg:x="300207812775" fg:w="2647969133"/><text x="3.2920%" y="191.50"></text></g><g><title>&lt;std::path::State as core::cmp::PartialEq&gt;::eq (1,455,035,874 samples, 0.01%)</title><rect x="3.0541%" y="165" width="0.0147%" height="15" fill="rgb(250,205,27)" fg:x="301400746034" fg:w="1455035874"/><text x="3.3041%" y="175.50"></text></g><g><title>&lt;std::path::Components as core::iter::traits::iterator::Iterator&gt;::next (8,338,259,314 samples, 0.08%)</title><rect x="2.9872%" y="197" width="0.0845%" height="15" fill="rgb(210,80,43)" fg:x="294797292782" fg:w="8338259314"/><text x="3.2372%" y="207.50"></text></g><g><title>core::iter::traits::iterator::Iterator::cmp (10,053,859,718 samples, 0.10%)</title><rect x="2.9872%" y="277" width="0.1019%" height="15" fill="rgb(247,160,36)" fg:x="294797292782" fg:w="10053859718"/><text x="3.2372%" y="287.50"></text></g><g><title>core::iter::traits::iterator::Iterator::cmp_by (10,053,859,718 samples, 0.10%)</title><rect x="2.9872%" y="261" width="0.1019%" height="15" fill="rgb(234,13,49)" fg:x="294797292782" fg:w="10053859718"/><text x="3.2372%" y="271.50"></text></g><g><title>core::iter::traits::iterator::iter_compare (10,053,859,718 samples, 0.10%)</title><rect x="2.9872%" y="245" width="0.1019%" height="15" fill="rgb(234,122,0)" fg:x="294797292782" fg:w="10053859718"/><text x="3.2372%" y="255.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_for_each (10,053,859,718 samples, 0.10%)</title><rect x="2.9872%" y="229" width="0.1019%" height="15" fill="rgb(207,146,38)" fg:x="294797292782" fg:w="10053859718"/><text x="3.2372%" y="239.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (10,053,859,718 samples, 0.10%)</title><rect x="2.9872%" y="213" width="0.1019%" height="15" fill="rgb(207,177,25)" fg:x="294797292782" fg:w="10053859718"/><text x="3.2372%" y="223.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_for_each::call::_{{closure}} (1,715,600,404 samples, 0.02%)</title><rect x="3.0716%" y="197" width="0.0174%" height="15" fill="rgb(211,178,42)" fg:x="303135552096" fg:w="1715600404"/><text x="3.3216%" y="207.50"></text></g><g><title>core::iter::traits::iterator::iter_compare::compare::_{{closure}} (1,715,600,404 samples, 0.02%)</title><rect x="3.0716%" y="181" width="0.0174%" height="15" fill="rgb(230,69,54)" fg:x="303135552096" fg:w="1715600404"/><text x="3.3216%" y="191.50"></text></g><g><title>core::iter::traits::iterator::Iterator::cmp_by::compare::_{{closure}} (1,294,056,084 samples, 0.01%)</title><rect x="3.0759%" y="165" width="0.0131%" height="15" fill="rgb(214,135,41)" fg:x="303557096416" fg:w="1294056084"/><text x="3.3259%" y="175.50"></text></g><g><title>core::iter::traits::iterator::Iterator::cmp::_{{closure}} (1,246,700,655 samples, 0.01%)</title><rect x="3.0764%" y="149" width="0.0126%" height="15" fill="rgb(237,67,25)" fg:x="303604451845" fg:w="1246700655"/><text x="3.3264%" y="159.50"></text></g><g><title>&lt;std::path::Component as core::cmp::Ord&gt;::cmp (1,246,700,655 samples, 0.01%)</title><rect x="3.0764%" y="133" width="0.0126%" height="15" fill="rgb(222,189,50)" fg:x="303604451845" fg:w="1246700655"/><text x="3.3264%" y="143.50"></text></g><g><title>core::iter::traits::iterator::Iterator::position (7,194,274,582 samples, 0.07%)</title><rect x="3.0890%" y="277" width="0.0729%" height="15" fill="rgb(245,148,34)" fg:x="304851152500" fg:w="7194274582"/><text x="3.3390%" y="287.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (7,194,274,582 samples, 0.07%)</title><rect x="3.0890%" y="261" width="0.0729%" height="15" fill="rgb(222,29,6)" fg:x="304851152500" fg:w="7194274582"/><text x="3.3390%" y="271.50"></text></g><g><title>core::iter::traits::iterator::Iterator::position::check::_{{closure}} (6,448,204,468 samples, 0.07%)</title><rect x="3.0966%" y="245" width="0.0653%" height="15" fill="rgb(221,189,43)" fg:x="305597222614" fg:w="6448204468"/><text x="3.3466%" y="255.50"></text></g><g><title>std::path::compare_components::_{{closure}} (1,944,980,921 samples, 0.02%)</title><rect x="3.1422%" y="229" width="0.0197%" height="15" fill="rgb(207,36,27)" fg:x="310100446161" fg:w="1944980921"/><text x="3.3922%" y="239.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::contains_key (21,096,205,337 samples, 0.21%)</title><rect x="2.9543%" y="389" width="0.2138%" height="15" fill="rgb(217,90,24)" fg:x="291550189453" fg:w="21096205337"/><text x="3.2043%" y="399.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::get (21,096,205,337 samples, 0.21%)</title><rect x="2.9543%" y="373" width="0.2138%" height="15" fill="rgb(224,66,35)" fg:x="291550189453" fg:w="21096205337"/><text x="3.2043%" y="383.50"></text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::search_tree (21,096,205,337 samples, 0.21%)</title><rect x="2.9543%" y="357" width="0.2138%" height="15" fill="rgb(221,13,50)" fg:x="291550189453" fg:w="21096205337"/><text x="3.2043%" y="367.50"></text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;&gt;::search_node (21,096,205,337 samples, 0.21%)</title><rect x="2.9543%" y="341" width="0.2138%" height="15" fill="rgb(236,68,49)" fg:x="291550189453" fg:w="21096205337"/><text x="3.2043%" y="351.50"></text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;&gt;::find_key_index (21,096,205,337 samples, 0.21%)</title><rect x="2.9543%" y="325" width="0.2138%" height="15" fill="rgb(229,146,28)" fg:x="291550189453" fg:w="21096205337"/><text x="3.2043%" y="335.50"></text></g><g><title>&lt;std::path::Path as core::cmp::Ord&gt;::cmp (21,096,205,337 samples, 0.21%)</title><rect x="2.9543%" y="309" width="0.2138%" height="15" fill="rgb(225,31,38)" fg:x="291550189453" fg:w="21096205337"/><text x="3.2043%" y="319.50"></text></g><g><title>std::path::compare_components (21,096,205,337 samples, 0.21%)</title><rect x="2.9543%" y="293" width="0.2138%" height="15" fill="rgb(250,208,3)" fg:x="291550189453" fg:w="21096205337"/><text x="3.2043%" y="303.50"></text></g><g><title>std::path::Components::finished (2,963,057,031 samples, 0.03%)</title><rect x="3.2443%" y="197" width="0.0300%" height="15" fill="rgb(246,54,23)" fg:x="320174983233" fg:w="2963057031"/><text x="3.4943%" y="207.50"></text></g><g><title>&lt;std::path::State as core::cmp::PartialEq&gt;::eq (1,839,287,574 samples, 0.02%)</title><rect x="3.2557%" y="181" width="0.0186%" height="15" fill="rgb(243,76,11)" fg:x="321298752690" fg:w="1839287574"/><text x="3.5057%" y="191.50"></text></g><g><title>&lt;std::path::Components as core::iter::traits::iterator::Iterator&gt;::next (7,671,304,129 samples, 0.08%)</title><rect x="3.1989%" y="213" width="0.0777%" height="15" fill="rgb(245,21,50)" fg:x="315693887808" fg:w="7671304129"/><text x="3.4489%" y="223.50"></text></g><g><title>core::iter::traits::iterator::Iterator::cmp (8,547,458,179 samples, 0.09%)</title><rect x="3.1989%" y="293" width="0.0866%" height="15" fill="rgb(228,9,43)" fg:x="315693887808" fg:w="8547458179"/><text x="3.4489%" y="303.50"></text></g><g><title>core::iter::traits::iterator::Iterator::cmp_by (8,547,458,179 samples, 0.09%)</title><rect x="3.1989%" y="277" width="0.0866%" height="15" fill="rgb(208,100,47)" fg:x="315693887808" fg:w="8547458179"/><text x="3.4489%" y="287.50"></text></g><g><title>core::iter::traits::iterator::iter_compare (8,547,458,179 samples, 0.09%)</title><rect x="3.1989%" y="261" width="0.0866%" height="15" fill="rgb(232,26,8)" fg:x="315693887808" fg:w="8547458179"/><text x="3.4489%" y="271.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_for_each (8,547,458,179 samples, 0.09%)</title><rect x="3.1989%" y="245" width="0.0866%" height="15" fill="rgb(216,166,38)" fg:x="315693887808" fg:w="8547458179"/><text x="3.4489%" y="255.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (8,547,458,179 samples, 0.09%)</title><rect x="3.1989%" y="229" width="0.0866%" height="15" fill="rgb(251,202,51)" fg:x="315693887808" fg:w="8547458179"/><text x="3.4489%" y="239.50"></text></g><g><title>core::iter::traits::iterator::Iterator::position (6,708,592,928 samples, 0.07%)</title><rect x="3.2855%" y="293" width="0.0680%" height="15" fill="rgb(254,216,34)" fg:x="324241345987" fg:w="6708592928"/><text x="3.5355%" y="303.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (6,708,592,928 samples, 0.07%)</title><rect x="3.2855%" y="277" width="0.0680%" height="15" fill="rgb(251,32,27)" fg:x="324241345987" fg:w="6708592928"/><text x="3.5355%" y="287.50"></text></g><g><title>core::iter::traits::iterator::Iterator::position::check::_{{closure}} (6,200,454,453 samples, 0.06%)</title><rect x="3.2907%" y="261" width="0.0628%" height="15" fill="rgb(208,127,28)" fg:x="324749484462" fg:w="6200454453"/><text x="3.5407%" y="271.50"></text></g><g><title>std::path::compare_components::_{{closure}} (1,950,463,233 samples, 0.02%)</title><rect x="3.3337%" y="245" width="0.0198%" height="15" fill="rgb(224,137,22)" fg:x="328999475682" fg:w="1950463233"/><text x="3.5837%" y="255.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::get_mut (18,676,637,164 samples, 0.19%)</title><rect x="3.1680%" y="389" width="0.1892%" height="15" fill="rgb(254,70,32)" fg:x="312646394790" fg:w="18676637164"/><text x="3.4180%" y="399.50"></text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::search_tree (18,676,637,164 samples, 0.19%)</title><rect x="3.1680%" y="373" width="0.1892%" height="15" fill="rgb(229,75,37)" fg:x="312646394790" fg:w="18676637164"/><text x="3.4180%" y="383.50"></text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;&gt;::search_node (18,676,637,164 samples, 0.19%)</title><rect x="3.1680%" y="357" width="0.1892%" height="15" fill="rgb(252,64,23)" fg:x="312646394790" fg:w="18676637164"/><text x="3.4180%" y="367.50"></text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;&gt;::find_key_index (18,676,637,164 samples, 0.19%)</title><rect x="3.1680%" y="341" width="0.1892%" height="15" fill="rgb(232,162,48)" fg:x="312646394790" fg:w="18676637164"/><text x="3.4180%" y="351.50"></text></g><g><title>&lt;std::path::Path as core::cmp::Ord&gt;::cmp (18,676,637,164 samples, 0.19%)</title><rect x="3.1680%" y="325" width="0.1892%" height="15" fill="rgb(246,160,12)" fg:x="312646394790" fg:w="18676637164"/><text x="3.4180%" y="335.50"></text></g><g><title>std::path::compare_components (18,676,637,164 samples, 0.19%)</title><rect x="3.1680%" y="309" width="0.1892%" height="15" fill="rgb(247,166,0)" fg:x="312646394790" fg:w="18676637164"/><text x="3.4180%" y="319.50"></text></g><g><title>cargo_tarpaulin::traces::TraceMap::add_trace (39,958,548,434 samples, 0.40%)</title><rect x="2.9543%" y="405" width="0.4049%" height="15" fill="rgb(249,219,21)" fg:x="291550189453" fg:w="39958548434"/><text x="3.2043%" y="415.50"></text></g><g><title>std::path::Components::finished (1,158,243,443 samples, 0.01%)</title><rect x="3.3929%" y="197" width="0.0117%" height="15" fill="rgb(205,209,3)" fg:x="334835911991" fg:w="1158243443"/><text x="3.6429%" y="207.50"></text></g><g><title>&lt;std::path::Components as core::iter::traits::iterator::Iterator&gt;::next (3,267,387,845 samples, 0.03%)</title><rect x="3.3733%" y="213" width="0.0331%" height="15" fill="rgb(243,44,1)" fg:x="332907819201" fg:w="3267387845"/><text x="3.6233%" y="223.50"></text></g><g><title>core::iter::traits::iterator::Iterator::cmp (4,005,851,658 samples, 0.04%)</title><rect x="3.3733%" y="293" width="0.0406%" height="15" fill="rgb(206,159,16)" fg:x="332907819201" fg:w="4005851658"/><text x="3.6233%" y="303.50"></text></g><g><title>core::iter::traits::iterator::Iterator::cmp_by (4,005,851,658 samples, 0.04%)</title><rect x="3.3733%" y="277" width="0.0406%" height="15" fill="rgb(244,77,30)" fg:x="332907819201" fg:w="4005851658"/><text x="3.6233%" y="287.50"></text></g><g><title>core::iter::traits::iterator::iter_compare (4,005,851,658 samples, 0.04%)</title><rect x="3.3733%" y="261" width="0.0406%" height="15" fill="rgb(218,69,12)" fg:x="332907819201" fg:w="4005851658"/><text x="3.6233%" y="271.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_for_each (4,005,851,658 samples, 0.04%)</title><rect x="3.3733%" y="245" width="0.0406%" height="15" fill="rgb(212,87,7)" fg:x="332907819201" fg:w="4005851658"/><text x="3.6233%" y="255.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (4,005,851,658 samples, 0.04%)</title><rect x="3.3733%" y="229" width="0.0406%" height="15" fill="rgb(245,114,25)" fg:x="332907819201" fg:w="4005851658"/><text x="3.6233%" y="239.50"></text></g><g><title>core::iter::traits::iterator::Iterator::position (3,518,236,981 samples, 0.04%)</title><rect x="3.4139%" y="293" width="0.0356%" height="15" fill="rgb(210,61,42)" fg:x="336913670859" fg:w="3518236981"/><text x="3.6639%" y="303.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (3,518,236,981 samples, 0.04%)</title><rect x="3.4139%" y="277" width="0.0356%" height="15" fill="rgb(211,52,33)" fg:x="336913670859" fg:w="3518236981"/><text x="3.6639%" y="287.50"></text></g><g><title>core::iter::traits::iterator::Iterator::position::check::_{{closure}} (2,929,180,837 samples, 0.03%)</title><rect x="3.4199%" y="261" width="0.0297%" height="15" fill="rgb(234,58,33)" fg:x="337502727003" fg:w="2929180837"/><text x="3.6699%" y="271.50"></text></g><g><title>std::path::compare_components::_{{closure}} (1,125,917,743 samples, 0.01%)</title><rect x="3.4382%" y="245" width="0.0114%" height="15" fill="rgb(220,115,36)" fg:x="339305990097" fg:w="1125917743"/><text x="3.6882%" y="255.50"></text></g><g><title>cargo_tarpaulin::traces::TraceMap::contains_location (9,154,756,314 samples, 0.09%)</title><rect x="3.3591%" y="405" width="0.0928%" height="15" fill="rgb(243,153,54)" fg:x="331508737887" fg:w="9154756314"/><text x="3.6091%" y="415.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::get (9,154,756,314 samples, 0.09%)</title><rect x="3.3591%" y="389" width="0.0928%" height="15" fill="rgb(251,47,18)" fg:x="331508737887" fg:w="9154756314"/><text x="3.6091%" y="399.50"></text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::search_tree (9,154,756,314 samples, 0.09%)</title><rect x="3.3591%" y="373" width="0.0928%" height="15" fill="rgb(242,102,42)" fg:x="331508737887" fg:w="9154756314"/><text x="3.6091%" y="383.50"></text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;&gt;::search_node (9,154,756,314 samples, 0.09%)</title><rect x="3.3591%" y="357" width="0.0928%" height="15" fill="rgb(234,31,38)" fg:x="331508737887" fg:w="9154756314"/><text x="3.6091%" y="367.50"></text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;&gt;::find_key_index (9,154,756,314 samples, 0.09%)</title><rect x="3.3591%" y="341" width="0.0928%" height="15" fill="rgb(221,117,51)" fg:x="331508737887" fg:w="9154756314"/><text x="3.6091%" y="351.50"></text></g><g><title>&lt;std::path::Path as core::cmp::Ord&gt;::cmp (9,154,756,314 samples, 0.09%)</title><rect x="3.3591%" y="325" width="0.0928%" height="15" fill="rgb(212,20,18)" fg:x="331508737887" fg:w="9154756314"/><text x="3.6091%" y="335.50"></text></g><g><title>std::path::compare_components (9,154,756,314 samples, 0.09%)</title><rect x="3.3591%" y="309" width="0.0928%" height="15" fill="rgb(245,133,36)" fg:x="331508737887" fg:w="9154756314"/><text x="3.6091%" y="319.50"></text></g><g><title>core::slice::sort::unstable::quicksort::quicksort (1,265,993,644 samples, 0.01%)</title><rect x="3.4519%" y="405" width="0.0128%" height="15" fill="rgb(212,6,19)" fg:x="340663494201" fg:w="1265993644"/><text x="3.7019%" y="415.50"></text></g><g><title>core::slice::sort::unstable::quicksort::quicksort (1,265,993,644 samples, 0.01%)</title><rect x="3.4519%" y="389" width="0.0128%" height="15" fill="rgb(218,1,36)" fg:x="340663494201" fg:w="1265993644"/><text x="3.7019%" y="399.50"></text></g><g><title>core::slice::sort::unstable::quicksort::quicksort (1,265,993,644 samples, 0.01%)</title><rect x="3.4519%" y="373" width="0.0128%" height="15" fill="rgb(246,84,54)" fg:x="340663494201" fg:w="1265993644"/><text x="3.7019%" y="383.50"></text></g><g><title>core::slice::sort::unstable::quicksort::quicksort (1,265,993,644 samples, 0.01%)</title><rect x="3.4519%" y="357" width="0.0128%" height="15" fill="rgb(242,110,6)" fg:x="340663494201" fg:w="1265993644"/><text x="3.7019%" y="367.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1,572,956,678 samples, 0.02%)</title><rect x="3.5044%" y="213" width="0.0159%" height="15" fill="rgb(214,47,5)" fg:x="345845986248" fg:w="1572956678"/><text x="3.7544%" y="223.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1,572,956,678 samples, 0.02%)</title><rect x="3.5044%" y="197" width="0.0159%" height="15" fill="rgb(218,159,25)" fg:x="345845986248" fg:w="1572956678"/><text x="3.7544%" y="207.50"></text></g><g><title>alloc::alloc::alloc (1,572,956,678 samples, 0.02%)</title><rect x="3.5044%" y="181" width="0.0159%" height="15" fill="rgb(215,211,28)" fg:x="345845986248" fg:w="1572956678"/><text x="3.7544%" y="191.50"></text></g><g><title>malloc (1,525,116,436 samples, 0.02%)</title><rect x="3.5049%" y="165" width="0.0155%" height="15" fill="rgb(238,59,32)" fg:x="345893826490" fg:w="1525116436"/><text x="3.7549%" y="175.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1,666,837,486 samples, 0.02%)</title><rect x="3.5040%" y="277" width="0.0169%" height="15" fill="rgb(226,82,3)" fg:x="345799910857" fg:w="1666837486"/><text x="3.7540%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1,666,837,486 samples, 0.02%)</title><rect x="3.5040%" y="261" width="0.0169%" height="15" fill="rgb(240,164,32)" fg:x="345799910857" fg:w="1666837486"/><text x="3.7540%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (1,666,837,486 samples, 0.02%)</title><rect x="3.5040%" y="245" width="0.0169%" height="15" fill="rgb(232,46,7)" fg:x="345799910857" fg:w="1666837486"/><text x="3.7540%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (1,666,837,486 samples, 0.02%)</title><rect x="3.5040%" y="229" width="0.0169%" height="15" fill="rgb(229,129,53)" fg:x="345799910857" fg:w="1666837486"/><text x="3.7540%" y="239.50"></text></g><g><title>&lt;std::path::PathBuf as core::clone::Clone&gt;::clone (1,759,798,089 samples, 0.02%)</title><rect x="3.5035%" y="389" width="0.0178%" height="15" fill="rgb(234,188,29)" fg:x="345751882279" fg:w="1759798089"/><text x="3.7535%" y="399.50"></text></g><g><title>&lt;std::ffi::os_str::OsString as core::clone::Clone&gt;::clone (1,759,798,089 samples, 0.02%)</title><rect x="3.5035%" y="373" width="0.0178%" height="15" fill="rgb(246,141,4)" fg:x="345751882279" fg:w="1759798089"/><text x="3.7535%" y="383.50"></text></g><g><title>&lt;std::sys::os_str::bytes::Buf as core::clone::Clone&gt;::clone (1,759,798,089 samples, 0.02%)</title><rect x="3.5035%" y="357" width="0.0178%" height="15" fill="rgb(229,23,39)" fg:x="345751882279" fg:w="1759798089"/><text x="3.7535%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1,759,798,089 samples, 0.02%)</title><rect x="3.5035%" y="341" width="0.0178%" height="15" fill="rgb(206,12,3)" fg:x="345751882279" fg:w="1759798089"/><text x="3.7535%" y="351.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1,711,769,511 samples, 0.02%)</title><rect x="3.5040%" y="325" width="0.0173%" height="15" fill="rgb(252,226,20)" fg:x="345799910857" fg:w="1711769511"/><text x="3.7540%" y="335.50"></text></g><g><title>alloc::slice::hack::to_vec (1,711,769,511 samples, 0.02%)</title><rect x="3.5040%" y="309" width="0.0173%" height="15" fill="rgb(216,123,35)" fg:x="345799910857" fg:w="1711769511"/><text x="3.7540%" y="319.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1,711,769,511 samples, 0.02%)</title><rect x="3.5040%" y="293" width="0.0173%" height="15" fill="rgb(212,68,40)" fg:x="345799910857" fg:w="1711769511"/><text x="3.7540%" y="303.50"></text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::search_tree (2,122,033,813 samples, 0.02%)</title><rect x="3.5271%" y="373" width="0.0215%" height="15" fill="rgb(254,125,32)" fg:x="348082665914" fg:w="2122033813"/><text x="3.7771%" y="383.50"></text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;&gt;::search_node (1,929,188,705 samples, 0.02%)</title><rect x="3.5290%" y="357" width="0.0195%" height="15" fill="rgb(253,97,22)" fg:x="348275511022" fg:w="1929188705"/><text x="3.7790%" y="367.50"></text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;&gt;::find_key_index (1,929,188,705 samples, 0.02%)</title><rect x="3.5290%" y="341" width="0.0195%" height="15" fill="rgb(241,101,14)" fg:x="348275511022" fg:w="1929188705"/><text x="3.7790%" y="351.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Immut,K,V,Type&gt;::keys (1,083,084,370 samples, 0.01%)</title><rect x="3.5376%" y="325" width="0.0110%" height="15" fill="rgb(238,103,29)" fg:x="349121615357" fg:w="1083084370"/><text x="3.7876%" y="335.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::entry (2,738,523,784 samples, 0.03%)</title><rect x="3.5213%" y="389" width="0.0277%" height="15" fill="rgb(233,195,47)" fg:x="347511680368" fg:w="2738523784"/><text x="3.7713%" y="399.50"></text></g><g><title>_int_free (3,063,335,269 samples, 0.03%)</title><rect x="3.5735%" y="181" width="0.0310%" height="15" fill="rgb(246,218,30)" fg:x="352661688735" fg:w="3063335269"/><text x="3.8235%" y="191.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (6,519,354,215 samples, 0.07%)</title><rect x="3.5548%" y="373" width="0.0661%" height="15" fill="rgb(219,145,47)" fg:x="350814182342" fg:w="6519354215"/><text x="3.8048%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;[std::path::PathBuf]&gt; (6,519,354,215 samples, 0.07%)</title><rect x="3.5548%" y="357" width="0.0661%" height="15" fill="rgb(243,12,26)" fg:x="350814182342" fg:w="6519354215"/><text x="3.8048%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::path::PathBuf&gt; (6,519,354,215 samples, 0.07%)</title><rect x="3.5548%" y="341" width="0.0661%" height="15" fill="rgb(214,87,16)" fg:x="350814182342" fg:w="6519354215"/><text x="3.8048%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::ffi::os_str::OsString&gt; (6,519,354,215 samples, 0.07%)</title><rect x="3.5548%" y="325" width="0.0661%" height="15" fill="rgb(208,99,42)" fg:x="350814182342" fg:w="6519354215"/><text x="3.8048%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sys::os_str::bytes::Buf&gt; (6,519,354,215 samples, 0.07%)</title><rect x="3.5548%" y="309" width="0.0661%" height="15" fill="rgb(253,99,2)" fg:x="350814182342" fg:w="6519354215"/><text x="3.8048%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (6,519,354,215 samples, 0.07%)</title><rect x="3.5548%" y="293" width="0.0661%" height="15" fill="rgb(220,168,23)" fg:x="350814182342" fg:w="6519354215"/><text x="3.8048%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (6,519,354,215 samples, 0.07%)</title><rect x="3.5548%" y="277" width="0.0661%" height="15" fill="rgb(242,38,24)" fg:x="350814182342" fg:w="6519354215"/><text x="3.8048%" y="287.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (6,519,354,215 samples, 0.07%)</title><rect x="3.5548%" y="261" width="0.0661%" height="15" fill="rgb(225,182,9)" fg:x="350814182342" fg:w="6519354215"/><text x="3.8048%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (6,519,354,215 samples, 0.07%)</title><rect x="3.5548%" y="245" width="0.0661%" height="15" fill="rgb(243,178,37)" fg:x="350814182342" fg:w="6519354215"/><text x="3.8048%" y="255.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (6,519,354,215 samples, 0.07%)</title><rect x="3.5548%" y="229" width="0.0661%" height="15" fill="rgb(232,139,19)" fg:x="350814182342" fg:w="6519354215"/><text x="3.8048%" y="239.50"></text></g><g><title>alloc::alloc::dealloc (6,519,354,215 samples, 0.07%)</title><rect x="3.5548%" y="213" width="0.0661%" height="15" fill="rgb(225,201,24)" fg:x="350814182342" fg:w="6519354215"/><text x="3.8048%" y="223.50"></text></g><g><title>cfree@GLIBC_2.2.5 (6,139,583,675 samples, 0.06%)</title><rect x="3.5586%" y="197" width="0.0622%" height="15" fill="rgb(221,47,46)" fg:x="351193952882" fg:w="6139583675"/><text x="3.8086%" y="207.50"></text></g><g><title>_int_free_merge_chunk (1,608,512,553 samples, 0.02%)</title><rect x="3.6045%" y="181" width="0.0163%" height="15" fill="rgb(249,23,13)" fg:x="355725024004" fg:w="1608512553"/><text x="3.8545%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;std::path::PathBuf&gt;&gt; (7,291,734,546 samples, 0.07%)</title><rect x="3.5548%" y="389" width="0.0739%" height="15" fill="rgb(219,9,5)" fg:x="350814182342" fg:w="7291734546"/><text x="3.8048%" y="399.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (997,725,560 samples, 0.01%)</title><rect x="3.6296%" y="293" width="0.0101%" height="15" fill="rgb(254,171,16)" fg:x="358202119254" fg:w="997725560"/><text x="3.8796%" y="303.50"></text></g><g><title>alloc::alloc::dealloc (997,725,560 samples, 0.01%)</title><rect x="3.6296%" y="277" width="0.0101%" height="15" fill="rgb(230,171,20)" fg:x="358202119254" fg:w="997725560"/><text x="3.8796%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::collections::hash::map::HashMap&lt;llvm_profparser::coverage::Counter,i64,core::hash::BuildHasherDefault&lt;rustc_hash::FxHasher&gt;&gt;&gt; (1,183,431,277 samples, 0.01%)</title><rect x="3.6287%" y="389" width="0.0120%" height="15" fill="rgb(210,71,41)" fg:x="358105916888" fg:w="1183431277"/><text x="3.8787%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::map::HashMap&lt;llvm_profparser::coverage::Counter,i64,core::hash::BuildHasherDefault&lt;rustc_hash::FxHasher&gt;&gt;&gt; (1,183,431,277 samples, 0.01%)</title><rect x="3.6287%" y="373" width="0.0120%" height="15" fill="rgb(206,173,20)" fg:x="358105916888" fg:w="1183431277"/><text x="3.8787%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::raw::RawTable&lt;(llvm_profparser::coverage::Counter,i64)&gt;&gt; (1,183,431,277 samples, 0.01%)</title><rect x="3.6287%" y="357" width="0.0120%" height="15" fill="rgb(233,88,34)" fg:x="358105916888" fg:w="1183431277"/><text x="3.8787%" y="367.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1,183,431,277 samples, 0.01%)</title><rect x="3.6287%" y="341" width="0.0120%" height="15" fill="rgb(223,209,46)" fg:x="358105916888" fg:w="1183431277"/><text x="3.8787%" y="351.50"></text></g><g><title>hashbrown::raw::RawTableInner::drop_inner_table (1,135,152,746 samples, 0.01%)</title><rect x="3.6291%" y="325" width="0.0115%" height="15" fill="rgb(250,43,18)" fg:x="358154195419" fg:w="1135152746"/><text x="3.8791%" y="335.50"></text></g><g><title>hashbrown::raw::RawTableInner::free_buckets (1,087,228,911 samples, 0.01%)</title><rect x="3.6296%" y="309" width="0.0110%" height="15" fill="rgb(208,13,10)" fg:x="358202119254" fg:w="1087228911"/><text x="3.8796%" y="319.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (11,095,036,355 samples, 0.11%)</title><rect x="3.6702%" y="197" width="0.1124%" height="15" fill="rgb(212,200,36)" fg:x="362207494484" fg:w="11095036355"/><text x="3.9202%" y="207.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (11,095,036,355 samples, 0.11%)</title><rect x="3.6702%" y="181" width="0.1124%" height="15" fill="rgb(225,90,30)" fg:x="362207494484" fg:w="11095036355"/><text x="3.9202%" y="191.50"></text></g><g><title>alloc::alloc::alloc (11,095,036,355 samples, 0.11%)</title><rect x="3.6702%" y="165" width="0.1124%" height="15" fill="rgb(236,182,39)" fg:x="362207494484" fg:w="11095036355"/><text x="3.9202%" y="175.50"></text></g><g><title>malloc (10,665,445,934 samples, 0.11%)</title><rect x="3.6746%" y="149" width="0.1081%" height="15" fill="rgb(212,144,35)" fg:x="362637084905" fg:w="10665445934"/><text x="3.9246%" y="159.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (11,712,517,956 samples, 0.12%)</title><rect x="3.6644%" y="261" width="0.1187%" height="15" fill="rgb(228,63,44)" fg:x="361637922291" fg:w="11712517956"/><text x="3.9144%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (11,712,517,956 samples, 0.12%)</title><rect x="3.6644%" y="245" width="0.1187%" height="15" fill="rgb(228,109,6)" fg:x="361637922291" fg:w="11712517956"/><text x="3.9144%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (11,712,517,956 samples, 0.12%)</title><rect x="3.6644%" y="229" width="0.1187%" height="15" fill="rgb(238,117,24)" fg:x="361637922291" fg:w="11712517956"/><text x="3.9144%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (11,712,517,956 samples, 0.12%)</title><rect x="3.6644%" y="213" width="0.1187%" height="15" fill="rgb(242,26,26)" fg:x="361637922291" fg:w="11712517956"/><text x="3.9144%" y="223.50"></text></g><g><title>&lt;std::path::PathBuf as core::clone::Clone&gt;::clone (14,167,177,331 samples, 0.14%)</title><rect x="3.6644%" y="373" width="0.1436%" height="15" fill="rgb(221,92,48)" fg:x="361637922291" fg:w="14167177331"/><text x="3.9144%" y="383.50"></text></g><g><title>&lt;std::ffi::os_str::OsString as core::clone::Clone&gt;::clone (14,167,177,331 samples, 0.14%)</title><rect x="3.6644%" y="357" width="0.1436%" height="15" fill="rgb(209,209,32)" fg:x="361637922291" fg:w="14167177331"/><text x="3.9144%" y="367.50"></text></g><g><title>&lt;std::sys::os_str::bytes::Buf as core::clone::Clone&gt;::clone (14,167,177,331 samples, 0.14%)</title><rect x="3.6644%" y="341" width="0.1436%" height="15" fill="rgb(221,70,22)" fg:x="361637922291" fg:w="14167177331"/><text x="3.9144%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (14,167,177,331 samples, 0.14%)</title><rect x="3.6644%" y="325" width="0.1436%" height="15" fill="rgb(248,145,5)" fg:x="361637922291" fg:w="14167177331"/><text x="3.9144%" y="335.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (14,167,177,331 samples, 0.14%)</title><rect x="3.6644%" y="309" width="0.1436%" height="15" fill="rgb(226,116,26)" fg:x="361637922291" fg:w="14167177331"/><text x="3.9144%" y="319.50"></text></g><g><title>alloc::slice::hack::to_vec (14,167,177,331 samples, 0.14%)</title><rect x="3.6644%" y="293" width="0.1436%" height="15" fill="rgb(244,5,17)" fg:x="361637922291" fg:w="14167177331"/><text x="3.9144%" y="303.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (14,167,177,331 samples, 0.14%)</title><rect x="3.6644%" y="277" width="0.1436%" height="15" fill="rgb(252,159,33)" fg:x="361637922291" fg:w="14167177331"/><text x="3.9144%" y="287.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (2,454,659,375 samples, 0.02%)</title><rect x="3.7831%" y="261" width="0.0249%" height="15" fill="rgb(206,71,0)" fg:x="373350440247" fg:w="2454659375"/><text x="4.0331%" y="271.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (2,454,659,375 samples, 0.02%)</title><rect x="3.7831%" y="245" width="0.0249%" height="15" fill="rgb(233,118,54)" fg:x="373350440247" fg:w="2454659375"/><text x="4.0331%" y="255.50"></text></g><g><title>__memmove_avx512_unaligned_erms (2,362,952,603 samples, 0.02%)</title><rect x="3.7841%" y="229" width="0.0239%" height="15" fill="rgb(234,83,48)" fg:x="373442147019" fg:w="2362952603"/><text x="4.0341%" y="239.50"></text></g><g><title>&lt;std::path::PathBuf as core::ops::deref::Deref&gt;::deref (1,423,370,045 samples, 0.01%)</title><rect x="3.8080%" y="373" width="0.0144%" height="15" fill="rgb(228,3,54)" fg:x="375805099622" fg:w="1423370045"/><text x="4.0580%" y="383.50"></text></g><g><title>std::path::Path::new (1,423,370,045 samples, 0.01%)</title><rect x="3.8080%" y="357" width="0.0144%" height="15" fill="rgb(226,155,13)" fg:x="375805099622" fg:w="1423370045"/><text x="4.0580%" y="367.50"></text></g><g><title>&lt;std::ffi::os_str::OsString as core::convert::AsRef&lt;std::ffi::os_str::OsStr&gt;&gt;::as_ref (1,423,370,045 samples, 0.01%)</title><rect x="3.8080%" y="341" width="0.0144%" height="15" fill="rgb(241,28,37)" fg:x="375805099622" fg:w="1423370045"/><text x="4.0580%" y="351.50"></text></g><g><title>&lt;std::ffi::os_str::OsString as core::ops::deref::Deref&gt;::deref (1,423,370,045 samples, 0.01%)</title><rect x="3.8080%" y="325" width="0.0144%" height="15" fill="rgb(233,93,10)" fg:x="375805099622" fg:w="1423370045"/><text x="4.0580%" y="335.50"></text></g><g><title>&lt;std::ffi::os_str::OsString as core::ops::index::Index&lt;core::ops::range::RangeFull&gt;&gt;::index (1,423,370,045 samples, 0.01%)</title><rect x="3.8080%" y="309" width="0.0144%" height="15" fill="rgb(225,113,19)" fg:x="375805099622" fg:w="1423370045"/><text x="4.0580%" y="319.50"></text></g><g><title>std::sys::os_str::bytes::Buf::as_slice (1,423,370,045 samples, 0.01%)</title><rect x="3.8080%" y="293" width="0.0144%" height="15" fill="rgb(241,2,18)" fg:x="375805099622" fg:w="1423370045"/><text x="4.0580%" y="303.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (1,423,370,045 samples, 0.01%)</title><rect x="3.8080%" y="277" width="0.0144%" height="15" fill="rgb(228,207,21)" fg:x="375805099622" fg:w="1423370045"/><text x="4.0580%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_slice (1,423,370,045 samples, 0.01%)</title><rect x="3.8080%" y="261" width="0.0144%" height="15" fill="rgb(213,211,35)" fg:x="375805099622" fg:w="1423370045"/><text x="4.0580%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (1,608,468,357 samples, 0.02%)</title><rect x="3.8263%" y="357" width="0.0163%" height="15" fill="rgb(209,83,10)" fg:x="377609497305" fg:w="1608468357"/><text x="4.0763%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_one (1,227,576,865 samples, 0.01%)</title><rect x="3.8301%" y="341" width="0.0124%" height="15" fill="rgb(209,164,1)" fg:x="377990388797" fg:w="1227576865"/><text x="4.0801%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_amortized (1,227,576,865 samples, 0.01%)</title><rect x="3.8301%" y="325" width="0.0124%" height="15" fill="rgb(213,184,43)" fg:x="377990388797" fg:w="1227576865"/><text x="4.0801%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (3,134,393,348 samples, 0.03%)</title><rect x="3.8224%" y="373" width="0.0318%" height="15" fill="rgb(231,61,34)" fg:x="377228469667" fg:w="3134393348"/><text x="4.0724%" y="383.50"></text></g><g><title>core::intrinsics::likely (2,516,637,645 samples, 0.03%)</title><rect x="3.8708%" y="277" width="0.0255%" height="15" fill="rgb(235,75,3)" fg:x="382006050833" fg:w="2516637645"/><text x="4.1208%" y="287.50"></text></g><g><title>hashbrown::control::group::sse2::Group::match_tag (1,593,174,799 samples, 0.02%)</title><rect x="3.8963%" y="277" width="0.0161%" height="15" fill="rgb(220,106,47)" fg:x="384522688478" fg:w="1593174799"/><text x="4.1463%" y="287.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (1,593,174,799 samples, 0.02%)</title><rect x="3.8963%" y="261" width="0.0161%" height="15" fill="rgb(210,196,33)" fg:x="384522688478" fg:w="1593174799"/><text x="4.1463%" y="271.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (5,572,061,408 samples, 0.06%)</title><rect x="3.8661%" y="373" width="0.0565%" height="15" fill="rgb(229,154,42)" fg:x="381537506484" fg:w="5572061408"/><text x="4.1161%" y="383.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (5,572,061,408 samples, 0.06%)</title><rect x="3.8661%" y="357" width="0.0565%" height="15" fill="rgb(228,114,26)" fg:x="381537506484" fg:w="5572061408"/><text x="4.1161%" y="367.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (5,572,061,408 samples, 0.06%)</title><rect x="3.8661%" y="341" width="0.0565%" height="15" fill="rgb(208,144,1)" fg:x="381537506484" fg:w="5572061408"/><text x="4.1161%" y="351.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (5,428,198,302 samples, 0.06%)</title><rect x="3.8675%" y="325" width="0.0550%" height="15" fill="rgb(239,112,37)" fg:x="381681369590" fg:w="5428198302"/><text x="4.1175%" y="335.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (5,428,198,302 samples, 0.06%)</title><rect x="3.8675%" y="309" width="0.0550%" height="15" fill="rgb(210,96,50)" fg:x="381681369590" fg:w="5428198302"/><text x="4.1175%" y="319.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (5,337,902,107 samples, 0.05%)</title><rect x="3.8685%" y="293" width="0.0541%" height="15" fill="rgb(222,178,2)" fg:x="381771665785" fg:w="5337902107"/><text x="4.1185%" y="303.50"></text></g><g><title>std::path::Path::is_absolute (3,263,496,395 samples, 0.03%)</title><rect x="3.9225%" y="373" width="0.0331%" height="15" fill="rgb(226,74,18)" fg:x="387109567892" fg:w="3263496395"/><text x="4.1725%" y="383.50"></text></g><g><title>std::sys::path::unix::is_absolute (2,222,933,215 samples, 0.02%)</title><rect x="3.9331%" y="357" width="0.0225%" height="15" fill="rgb(225,67,54)" fg:x="388150131072" fg:w="2222933215"/><text x="4.1831%" y="367.50"></text></g><g><title>std::path::Path::has_root (2,222,933,215 samples, 0.02%)</title><rect x="3.9331%" y="341" width="0.0225%" height="15" fill="rgb(251,92,32)" fg:x="388150131072" fg:w="2222933215"/><text x="4.1831%" y="351.50"></text></g><g><title>std::path::Components::has_root (2,222,933,215 samples, 0.02%)</title><rect x="3.9331%" y="325" width="0.0225%" height="15" fill="rgb(228,149,22)" fg:x="388150131072" fg:w="2222933215"/><text x="4.1831%" y="335.50"></text></g><g><title>std::path::Path::to_path_buf (2,764,689,389 samples, 0.03%)</title><rect x="3.9691%" y="341" width="0.0280%" height="15" fill="rgb(243,54,13)" fg:x="391699822156" fg:w="2764689389"/><text x="4.2191%" y="351.50"></text></g><g><title>std::ffi::os_str::OsStr::to_os_string (2,764,689,389 samples, 0.03%)</title><rect x="3.9691%" y="325" width="0.0280%" height="15" fill="rgb(243,180,28)" fg:x="391699822156" fg:w="2764689389"/><text x="4.2191%" y="335.50"></text></g><g><title>std::sys::os_str::bytes::Slice::to_owned (2,764,689,389 samples, 0.03%)</title><rect x="3.9691%" y="309" width="0.0280%" height="15" fill="rgb(208,167,24)" fg:x="391699822156" fg:w="2764689389"/><text x="4.2191%" y="319.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (2,764,689,389 samples, 0.03%)</title><rect x="3.9691%" y="293" width="0.0280%" height="15" fill="rgb(245,73,45)" fg:x="391699822156" fg:w="2764689389"/><text x="4.2191%" y="303.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (2,764,689,389 samples, 0.03%)</title><rect x="3.9691%" y="277" width="0.0280%" height="15" fill="rgb(237,203,48)" fg:x="391699822156" fg:w="2764689389"/><text x="4.2191%" y="287.50"></text></g><g><title>alloc::slice::hack::to_vec (2,764,689,389 samples, 0.03%)</title><rect x="3.9691%" y="261" width="0.0280%" height="15" fill="rgb(211,197,16)" fg:x="391699822156" fg:w="2764689389"/><text x="4.2191%" y="271.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (2,764,689,389 samples, 0.03%)</title><rect x="3.9691%" y="245" width="0.0280%" height="15" fill="rgb(243,99,51)" fg:x="391699822156" fg:w="2764689389"/><text x="4.2191%" y="255.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (2,383,863,370 samples, 0.02%)</title><rect x="3.9729%" y="229" width="0.0242%" height="15" fill="rgb(215,123,29)" fg:x="392080648175" fg:w="2383863370"/><text x="4.2229%" y="239.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (2,383,863,370 samples, 0.02%)</title><rect x="3.9729%" y="213" width="0.0242%" height="15" fill="rgb(239,186,37)" fg:x="392080648175" fg:w="2383863370"/><text x="4.2229%" y="223.50"></text></g><g><title>__memmove_avx512_unaligned_erms (2,383,863,370 samples, 0.02%)</title><rect x="3.9729%" y="197" width="0.0242%" height="15" fill="rgb(252,136,39)" fg:x="392080648175" fg:w="2383863370"/><text x="4.2229%" y="207.50"></text></g><g><title>llvm_profparser::coverage::CoverageMappingInfo::get_files_from_id (36,494,803,348 samples, 0.37%)</title><rect x="3.6411%" y="389" width="0.3698%" height="15" fill="rgb(223,213,32)" fg:x="359337957636" fg:w="36494803348"/><text x="3.8911%" y="399.50"></text></g><g><title>std::path::Path::join (5,459,696,697 samples, 0.06%)</title><rect x="3.9556%" y="373" width="0.0553%" height="15" fill="rgb(233,115,5)" fg:x="390373064287" fg:w="5459696697"/><text x="4.2056%" y="383.50"></text></g><g><title>std::path::Path::_join (5,459,696,697 samples, 0.06%)</title><rect x="3.9556%" y="357" width="0.0553%" height="15" fill="rgb(207,226,44)" fg:x="390373064287" fg:w="5459696697"/><text x="4.2056%" y="367.50"></text></g><g><title>std::path::PathBuf::push (1,368,249,439 samples, 0.01%)</title><rect x="3.9971%" y="341" width="0.0139%" height="15" fill="rgb(208,126,0)" fg:x="394464511545" fg:w="1368249439"/><text x="4.2471%" y="351.50"></text></g><g><title>std::path::PathBuf::_push (1,368,249,439 samples, 0.01%)</title><rect x="3.9971%" y="325" width="0.0139%" height="15" fill="rgb(244,66,21)" fg:x="394464511545" fg:w="1368249439"/><text x="4.2471%" y="335.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (184,600,865,478 samples, 1.87%)</title><rect x="4.1094%" y="341" width="1.8705%" height="15" fill="rgb(222,97,12)" fg:x="405551077627" fg:w="184600865478"/><text x="4.3594%" y="351.50">&lt;..</text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (189,307,894,340 samples, 1.92%)</title><rect x="4.0627%" y="357" width="1.9182%" height="15" fill="rgb(219,213,19)" fg:x="400940921224" fg:w="189307894340"/><text x="4.3127%" y="367.50">&lt;..</text></g><g><title>[unknown] (5,231,072,689 samples, 0.05%)</title><rect x="72.5362%" y="325" width="0.0530%" height="15" fill="rgb(252,169,30)" fg:x="7158473137615" fg:w="5231072689"/><text x="72.7862%" y="335.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::cmp::PartialEq&gt;::eq (8,323,244,087,345 samples, 84.34%)</title><rect x="15.2773%" y="341" width="84.3387%" height="15" fill="rgb(206,32,51)" fg:x="1507690675673" fg:w="8323244087345"/><text x="15.5273%" y="351.50">&lt;core::option::Option&lt;T&gt; as core::cmp::PartialEq&gt;::eq</text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq for u64&gt;::eq (2,667,230,552,714 samples, 27.03%)</title><rect x="72.5892%" y="325" width="27.0268%" height="15" fill="rgb(250,172,42)" fg:x="7163704210304" fg:w="2667230552714"/><text x="72.8392%" y="335.50">core::cmp::impls::&lt;impl core::cmp::PartialE..</text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::find (9,434,071,309,725 samples, 95.59%)</title><rect x="4.0306%" y="373" width="95.5946%" height="15" fill="rgb(209,34,43)" fg:x="397770319004" fg:w="9434071309725"/><text x="4.2806%" y="383.50">&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::find</text></g><g><title>llvm_profparser::coverage::coverage_mapping::CoverageMapping::get_simple_counters::_{{closure}} (9,241,592,813,165 samples, 93.64%)</title><rect x="5.9809%" y="357" width="93.6442%" height="15" fill="rgb(223,11,35)" fg:x="590248815564" fg:w="9241592813165"/><text x="6.2309%" y="367.50">llvm_profparser::coverage::coverage_mapping::CoverageMapping::get_simple_counters::_{{closure}}</text></g><g><title>hashbrown::control::group::sse2::Group::match_tag (2,698,971,102 samples, 0.03%)</title><rect x="99.6559%" y="293" width="0.0273%" height="15" fill="rgb(251,219,26)" fg:x="9834874009208" fg:w="2698971102"/><text x="99.9059%" y="303.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (2,698,971,102 samples, 0.03%)</title><rect x="99.6559%" y="277" width="0.0273%" height="15" fill="rgb(231,119,3)" fg:x="9834874009208" fg:w="2698971102"/><text x="99.9059%" y="287.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::find_or_find_insert_slot (4,781,762,962 samples, 0.05%)</title><rect x="99.6462%" y="341" width="0.0485%" height="15" fill="rgb(216,97,11)" fg:x="9833916591156" fg:w="4781762962"/><text x="99.8962%" y="351.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find_or_find_insert_slot (4,781,762,962 samples, 0.05%)</title><rect x="99.6462%" y="325" width="0.0485%" height="15" fill="rgb(223,59,9)" fg:x="9833916591156" fg:w="4781762962"/><text x="99.8962%" y="335.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_or_find_insert_slot_inner (4,591,171,725 samples, 0.05%)</title><rect x="99.6481%" y="309" width="0.0465%" height="15" fill="rgb(233,93,31)" fg:x="9834107182393" fg:w="4591171725"/><text x="99.8981%" y="319.50"></text></g><g><title>llvm_profparser::coverage::coverage_mapping::CoverageMapping::get_simple_counters (9,442,960,475,592 samples, 95.68%)</title><rect x="4.0109%" y="389" width="95.6847%" height="15" fill="rgb(239,81,33)" fg:x="395832760984" fg:w="9442960475592"/><text x="4.2609%" y="399.50">llvm_profparser::coverage::coverage_mapping::CoverageMapping::get_simple_counters</text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::insert (6,435,825,754 samples, 0.07%)</title><rect x="99.6304%" y="373" width="0.0652%" height="15" fill="rgb(213,120,34)" fg:x="9832357410822" fg:w="6435825754"/><text x="99.8804%" y="383.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (4,970,440,193 samples, 0.05%)</title><rect x="99.6452%" y="357" width="0.0504%" height="15" fill="rgb(243,49,53)" fg:x="9833822796383" fg:w="4970440193"/><text x="99.8952%" y="367.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::entry (3,062,293,965 samples, 0.03%)</title><rect x="99.6980%" y="373" width="0.0310%" height="15" fill="rgb(247,216,33)" fg:x="9839029703641" fg:w="3062293965"/><text x="99.9480%" y="383.50"></text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::search_tree (2,780,672,611 samples, 0.03%)</title><rect x="99.7008%" y="357" width="0.0282%" height="15" fill="rgb(226,26,14)" fg:x="9839311324995" fg:w="2780672611"/><text x="99.9508%" y="367.50"></text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;&gt;::search_node (2,547,312,154 samples, 0.03%)</title><rect x="99.7032%" y="341" width="0.0258%" height="15" fill="rgb(215,49,53)" fg:x="9839544685452" fg:w="2547312154"/><text x="99.9532%" y="351.50"></text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;&gt;::find_key_index (2,547,312,154 samples, 0.03%)</title><rect x="99.7032%" y="325" width="0.0258%" height="15" fill="rgb(245,162,40)" fg:x="9839544685452" fg:w="2547312154"/><text x="99.9532%" y="335.50"></text></g><g><title>llvm_profparser::coverage::reporting::CoverageResult::insert (3,913,061,871 samples, 0.04%)</title><rect x="99.6956%" y="389" width="0.0397%" height="15" fill="rgb(229,68,17)" fg:x="9838793236576" fg:w="3913061871"/><text x="99.9456%" y="399.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (2,271,395,910 samples, 0.02%)</title><rect x="99.7352%" y="389" width="0.0230%" height="15" fill="rgb(213,182,10)" fg:x="9842706298447" fg:w="2271395910"/><text x="99.9852%" y="399.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (2,271,395,910 samples, 0.02%)</title><rect x="99.7352%" y="373" width="0.0230%" height="15" fill="rgb(245,125,30)" fg:x="9842706298447" fg:w="2271395910"/><text x="99.9852%" y="383.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (2,271,395,910 samples, 0.02%)</title><rect x="99.7352%" y="357" width="0.0230%" height="15" fill="rgb(232,202,2)" fg:x="9842706298447" fg:w="2271395910"/><text x="99.9852%" y="367.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (1,660,094,659 samples, 0.02%)</title><rect x="99.7414%" y="341" width="0.0168%" height="15" fill="rgb(237,140,51)" fg:x="9843317599698" fg:w="1660094659"/><text x="99.9914%" y="351.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (1,660,094,659 samples, 0.02%)</title><rect x="99.7414%" y="325" width="0.0168%" height="15" fill="rgb(236,157,25)" fg:x="9843317599698" fg:w="1660094659"/><text x="99.9914%" y="335.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (1,660,094,659 samples, 0.02%)</title><rect x="99.7414%" y="309" width="0.0168%" height="15" fill="rgb(219,209,0)" fg:x="9843317599698" fg:w="1660094659"/><text x="99.9914%" y="319.50"></text></g><g><title>cargo_tarpaulin::process_handling::get_test_coverage (9,554,981,030,782 samples, 96.82%)</title><rect x="2.9486%" y="485" width="96.8198%" height="15" fill="rgb(240,116,54)" fg:x="290996156206" fg:w="9554981030782"/><text x="3.1986%" y="495.50">cargo_tarpaulin::process_handling::get_test_coverage</text></g><g><title>cargo_tarpaulin::process_handling::collect_coverage (9,554,981,030,782 samples, 96.82%)</title><rect x="2.9486%" y="469" width="96.8198%" height="15" fill="rgb(216,10,36)" fg:x="290996156206" fg:w="9554981030782"/><text x="3.1986%" y="479.50">cargo_tarpaulin::process_handling::collect_coverage</text></g><g><title>cargo_tarpaulin::statemachine::TestState::step (9,554,981,030,782 samples, 96.82%)</title><rect x="2.9486%" y="453" width="96.8198%" height="15" fill="rgb(222,72,44)" fg:x="290996156206" fg:w="9554981030782"/><text x="3.1986%" y="463.50">cargo_tarpaulin::statemachine::TestState::step</text></g><g><title>&lt;alloc::boxed::Box&lt;dyn cargo_tarpaulin::statemachine::StateData&gt; as cargo_tarpaulin::statemachine::StateData&gt;::wait (9,554,981,030,782 samples, 96.82%)</title><rect x="2.9486%" y="437" width="96.8198%" height="15" fill="rgb(232,159,9)" fg:x="290996156206" fg:w="9554981030782"/><text x="3.1986%" y="447.50">&lt;alloc::boxed::Box&lt;dyn cargo_tarpaulin::statemachine::StateData&gt; as cargo_tarpaulin::statemachine::StateData&gt;::wait</text></g><g><title>&lt;cargo_tarpaulin::statemachine::instrumented::LlvmInstrumentedData as cargo_tarpaulin::statemachine::StateData&gt;::wait (9,554,981,030,782 samples, 96.82%)</title><rect x="2.9486%" y="421" width="96.8198%" height="15" fill="rgb(210,39,32)" fg:x="290996156206" fg:w="9554981030782"/><text x="3.1986%" y="431.50">&lt;cargo_tarpaulin::statemachine::instrumented::LlvmInstrumentedData as cargo_tarpaulin::statemachine::StateData&gt;::wait</text></g><g><title>llvm_profparser::coverage::coverage_mapping::CoverageMapping::generate_subreport (9,504,047,699,143 samples, 96.30%)</title><rect x="3.4647%" y="405" width="96.3036%" height="15" fill="rgb(216,194,45)" fg:x="341929487845" fg:w="9504047699143"/><text x="3.7147%" y="415.50">llvm_profparser::coverage::coverage_mapping::CoverageMapping::generate_subreport</text></g><g><title>std::rt::lang_start_internal (9,556,809,939,911 samples, 96.84%)</title><rect x="2.9486%" y="757" width="96.8383%" height="15" fill="rgb(218,18,35)" fg:x="290996156206" fg:w="9556809939911"/><text x="3.1986%" y="767.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (9,556,809,939,911 samples, 96.84%)</title><rect x="2.9486%" y="741" width="96.8383%" height="15" fill="rgb(207,83,51)" fg:x="290996156206" fg:w="9556809939911"/><text x="3.1986%" y="751.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (9,556,809,939,911 samples, 96.84%)</title><rect x="2.9486%" y="725" width="96.8383%" height="15" fill="rgb(225,63,43)" fg:x="290996156206" fg:w="9556809939911"/><text x="3.1986%" y="735.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (9,556,809,939,911 samples, 96.84%)</title><rect x="2.9486%" y="709" width="96.8383%" height="15" fill="rgb(207,57,36)" fg:x="290996156206" fg:w="9556809939911"/><text x="3.1986%" y="719.50">std::panicking::try::do_call</text></g><g><title>std::rt::lang_start_internal::_{{closure}} (9,556,809,939,911 samples, 96.84%)</title><rect x="2.9486%" y="693" width="96.8383%" height="15" fill="rgb(216,99,33)" fg:x="290996156206" fg:w="9556809939911"/><text x="3.1986%" y="703.50">std::rt::lang_start_internal::_{{closure}}</text></g><g><title>std::panic::catch_unwind (9,556,809,939,911 samples, 96.84%)</title><rect x="2.9486%" y="677" width="96.8383%" height="15" fill="rgb(225,42,16)" fg:x="290996156206" fg:w="9556809939911"/><text x="3.1986%" y="687.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (9,556,809,939,911 samples, 96.84%)</title><rect x="2.9486%" y="661" width="96.8383%" height="15" fill="rgb(220,201,45)" fg:x="290996156206" fg:w="9556809939911"/><text x="3.1986%" y="671.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (9,556,809,939,911 samples, 96.84%)</title><rect x="2.9486%" y="645" width="96.8383%" height="15" fill="rgb(225,33,4)" fg:x="290996156206" fg:w="9556809939911"/><text x="3.1986%" y="655.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (9,556,809,939,911 samples, 96.84%)</title><rect x="2.9486%" y="629" width="96.8383%" height="15" fill="rgb(224,33,50)" fg:x="290996156206" fg:w="9556809939911"/><text x="3.1986%" y="639.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>_ZN3std2rt10lang_start28_$u7b$$u7b$closure$u7d$$u7d$17hcb362ac0c2fab2b3E.llvm.16397163363871860421 (9,556,809,939,911 samples, 96.84%)</title><rect x="2.9486%" y="613" width="96.8383%" height="15" fill="rgb(246,198,51)" fg:x="290996156206" fg:w="9556809939911"/><text x="3.1986%" y="623.50">_ZN3std2rt10lang_start28_$u7b$$u7b$closure$u7d$$u7d$17hcb362ac0c2fab2b3E.llvm.16397163363871860421</text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (9,556,809,939,911 samples, 96.84%)</title><rect x="2.9486%" y="597" width="96.8383%" height="15" fill="rgb(205,22,4)" fg:x="290996156206" fg:w="9556809939911"/><text x="3.1986%" y="607.50">std::sys::backtrace::__rust_begin_short_backtrace</text></g><g><title>core::ops::function::FnOnce::call_once (9,556,809,939,911 samples, 96.84%)</title><rect x="2.9486%" y="581" width="96.8383%" height="15" fill="rgb(206,3,8)" fg:x="290996156206" fg:w="9556809939911"/><text x="3.1986%" y="591.50">core::ops::function::FnOnce::call_once</text></g><g><title>cargo_tarpaulin::main (9,556,809,939,911 samples, 96.84%)</title><rect x="2.9486%" y="565" width="96.8383%" height="15" fill="rgb(251,23,15)" fg:x="290996156206" fg:w="9556809939911"/><text x="3.1986%" y="575.50">cargo_tarpaulin::main</text></g><g><title>cargo_tarpaulin::run (9,556,809,939,911 samples, 96.84%)</title><rect x="2.9486%" y="549" width="96.8383%" height="15" fill="rgb(252,88,28)" fg:x="290996156206" fg:w="9556809939911"/><text x="3.1986%" y="559.50">cargo_tarpaulin::run</text></g><g><title>cargo_tarpaulin::collect_tracemap (9,556,809,939,911 samples, 96.84%)</title><rect x="2.9486%" y="533" width="96.8383%" height="15" fill="rgb(212,127,14)" fg:x="290996156206" fg:w="9556809939911"/><text x="3.1986%" y="543.50">cargo_tarpaulin::collect_tracemap</text></g><g><title>cargo_tarpaulin::trace (9,556,809,939,911 samples, 96.84%)</title><rect x="2.9486%" y="517" width="96.8383%" height="15" fill="rgb(247,145,37)" fg:x="290996156206" fg:w="9556809939911"/><text x="3.1986%" y="527.50">cargo_tarpaulin::trace</text></g><g><title>cargo_tarpaulin::launch_tarpaulin (9,556,809,939,911 samples, 96.84%)</title><rect x="2.9486%" y="501" width="96.8383%" height="15" fill="rgb(209,117,53)" fg:x="290996156206" fg:w="9556809939911"/><text x="3.1986%" y="511.50">cargo_tarpaulin::launch_tarpaulin</text></g><g><title>cargo_tarpaulin::source_analysis::SourceAnalysis::get_analysis (1,828,909,129 samples, 0.02%)</title><rect x="99.7684%" y="485" width="0.0185%" height="15" fill="rgb(212,90,42)" fg:x="9845977186988" fg:w="1828909129"/><text x="100.0184%" y="495.50"></text></g><g><title>cargo_tarpaulin::source_analysis::SourceAnalysis::analyse_package (1,828,909,129 samples, 0.02%)</title><rect x="99.7684%" y="469" width="0.0185%" height="15" fill="rgb(218,164,37)" fg:x="9845977186988" fg:w="1828909129"/><text x="100.0184%" y="479.50"></text></g><g><title>cargo-tarpaulin (9,847,173,646,229 samples, 99.78%)</title><rect x="0.0349%" y="773" width="99.7805%" height="15" fill="rgb(246,65,34)" fg:x="3446961172" fg:w="9847173646229"/><text x="0.2849%" y="783.50">cargo-tarpaulin</text></g><g><title>[unknown] (1,074,878,263 samples, 0.01%)</title><rect x="99.8161%" y="757" width="0.0109%" height="15" fill="rgb(231,100,33)" fg:x="9850681676181" fg:w="1074878263"/><text x="100.0661%" y="767.50"></text></g><g><title>cargo (1,857,243,660 samples, 0.02%)</title><rect x="99.8154%" y="773" width="0.0188%" height="15" fill="rgb(228,126,14)" fg:x="9850620607401" fg:w="1857243660"/><text x="100.0654%" y="783.50"></text></g><g><title>polars-1 (1,312,135,515 samples, 0.01%)</title><rect x="99.8942%" y="773" width="0.0133%" height="15" fill="rgb(215,173,21)" fg:x="9858389631313" fg:w="1312135515"/><text x="100.1442%" y="783.50"></text></g><g><title>polars-2 (1,603,484,173 samples, 0.02%)</title><rect x="99.9075%" y="773" width="0.0162%" height="15" fill="rgb(210,6,40)" fg:x="9859701766828" fg:w="1603484173"/><text x="100.1575%" y="783.50"></text></g><g><title>polars-3 (1,108,862,098 samples, 0.01%)</title><rect x="99.9237%" y="773" width="0.0112%" height="15" fill="rgb(212,48,18)" fg:x="9861305251001" fg:w="1108862098"/><text x="100.1737%" y="783.50"></text></g><g><title>polars-4 (1,017,561,347 samples, 0.01%)</title><rect x="99.9349%" y="773" width="0.0103%" height="15" fill="rgb(230,214,11)" fg:x="9862414113099" fg:w="1017561347"/><text x="100.1849%" y="783.50"></text></g><g><title>polars-5 (1,018,393,964 samples, 0.01%)</title><rect x="99.9453%" y="773" width="0.0103%" height="15" fill="rgb(254,105,39)" fg:x="9863431674446" fg:w="1018393964"/><text x="100.1953%" y="783.50"></text></g><g><title>polars-6 (1,202,275,922 samples, 0.01%)</title><rect x="99.9556%" y="773" width="0.0122%" height="15" fill="rgb(245,158,5)" fg:x="9864450068410" fg:w="1202275922"/><text x="100.2056%" y="783.50"></text></g><g><title>polars-7 (1,014,618,435 samples, 0.01%)</title><rect x="99.9678%" y="773" width="0.0103%" height="15" fill="rgb(249,208,11)" fg:x="9865652344332" fg:w="1014618435"/><text x="100.2178%" y="783.50"></text></g><g><title>polars-9 (1,096,070,740 samples, 0.01%)</title><rect x="99.9860%" y="773" width="0.0111%" height="15" fill="rgb(210,39,28)" fg:x="9867451115286" fg:w="1096070740"/><text x="100.2360%" y="783.50"></text></g><g><title>all (9,868,834,405,988 samples, 100%)</title><rect x="0.0000%" y="789" width="100.0000%" height="15" fill="rgb(211,56,53)" fg:x="0" fg:w="9868834405988"/><text x="0.2500%" y="799.50"></text></g></svg></svg>